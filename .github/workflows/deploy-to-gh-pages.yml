name: üåç Deploy to GitHub Pages (WebGL)

on:
  workflow_call:
    inputs:
      projectName:
        type: string
        required: true
      version:
        type: string
        required: true

jobs:
  deploy:
    name: üåê GitHub Pages Deployment
    runs-on: ubuntu-latest
    env:
      DEPLOY_DIR: deployment-artifacts/${{ inputs.projectName }}-${{ inputs.version }}/WebGL

    steps:
      - name: üì• Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: deployment-artifacts

      - name: üîç Check WebGL Build Exists
        run: |
          if [ ! -d "$DEPLOY_DIR" ]; then
            echo "‚ùå WebGL build not found. Cannot deploy to GitHub Pages."
            exit 1
          fi

      - name: üîé Detect WebGL Compression Format
        run: |
          cd "$DEPLOY_DIR"

          echo "üîç Checking for compression in WebGL build..."

          # Check for .br or .gz files
          if find . -type f \( -name "*.br" -o -name "*.gz" \) | grep -q .; then
            echo "‚ö†Ô∏è Compressed files detected (.br/.gz)"
          else
            echo "‚úÖ No compressed files found"
          fi

          # Check for compressionFormat references
          if grep -r --include=\*.{js,json,html} -E 'compressionFormat.*(br|gzip)' .; then
            echo "‚ö†Ô∏è Detected compressionFormat references in code"
          else
            echo "‚úÖ No compressionFormat references found"
          fi

      - name: ü©π Patch & Decompress Unity WebGL for GitHub Pages
        run: |
          echo "üîß Patching Unity WebGL files for GitHub Pages..."

          sudo apt-get update && sudo apt-get install -y brotli gzip

          cd "$DEPLOY_DIR"

          # Decompress .br files
          find . -type f -name "*.br" | while read f; do
            out="${f%.br}"
            echo "Decompressing Brotli: $f ‚Üí $out"
            brotli -d -f "$f" -o "$out"
            rm "$f"
          done

          # Decompress .gz files
          find . -type f -name "*.gz" | while read f; do
            out="${f%.gz}"
            echo "Decompressing Gzip: $f ‚Üí $out"
            gunzip -c "$f" > "$out"
            rm "$f"
          done

          # Strip references in JS/JSON/HTML
          find . -type f \( -name "*.js" -o -name "*.json" -o -name "*.html" \) -print0 | xargs -0 sed -i \
            -e 's/\.br//g' \
            -e 's/\.gz//g' \
            -e 's/compressionFormat:"br"/compressionFormat:null/g' \
            -e 's/compressionFormat:"gzip"/compressionFormat:null/g' \
            -e 's/"compressionFormat":"br"/"compressionFormat":null/g' \
            -e 's/"compressionFormat":"gzip"/"compressionFormat":null/g'

          echo "‚úÖ Patch complete."

      - name: üåç Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.DEPLOY_DIR }}
