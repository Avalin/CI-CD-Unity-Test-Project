name: 🔖 Version Resolver

on:
  workflow_call:
    inputs:
      buildType:
        description: "Build type: preview | release_candidate | release"
        required: true
        type: string
      version:
        description: "Optional version override from workflow input"
        required: false
        type: string
    outputs:
      version:
        description: "The resolved build version string"
        value: ${{ jobs.version_resolver.outputs.version }}
      release_existed:
        description: "Whether a GitHub release already exists for this version"
        value: ${{ jobs.version_resolver.outputs.release_existed }}

jobs:
  version_resolver:
    name: 🔖 Generate Build Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      release_existed: ${{ steps.check_release.outputs.exists }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: 🧰 Setup Helper Scripts
        run: |
          chmod +x .github/scripts/release/*.sh
          chmod +x .github/scripts/versioning/*.sh

      - name: Fetch All Tags
        run: git fetch --tags --force

      - name: Determine Version
        id: get_version
        shell: bash
        run: |
          REF="${GITHUB_REF}"
          EVENT="${GITHUB_EVENT_NAME}"
          INPUT_VERSION="${{ inputs.version }}"
          BUILD_TYPE="${{ inputs.buildType }}"

          # For release builds
          if [[ "$BUILD_TYPE" == "release" ]]; then
            if [[ "$REF" =~ ^refs/tags/(v?[0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
            elif [[ -n "$INPUT_VERSION" ]]; then
              # Validate the manual version format
              if [[ "$INPUT_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                VERSION="$INPUT_VERSION"
              else
                echo "❌ Invalid manual release version: '$INPUT_VERSION'"
                echo "Must be in format: vX.Y.Z (no suffixes)"
                exit 1
              fi
            else
              echo "❌ For 'release' builds, either push a Git tag or provide a Semver version input."
              exit 1
            fi

          # For release_candidate builds
          elif [[ "$BUILD_TYPE" == "release_candidate" ]]; then
            if [[ "$REF" =~ ^refs/tags/(v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
              echo "🏷️ Detected RC tag push: $VERSION"
            elif [[ -z "$INPUT_VERSION" ]]; then
              echo "🔍 No version provided — generating next available RC version..."
              BASE_TAG=$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | sed -E 's/^((v[0-9]+\.[0-9]+\.[0-9]+)).*/\1/' | sort -V | uniq | tail -n 1)
              BASE_TAG=${BASE_TAG:-v0.0.0}
              echo "👀 Using latest base tag: $BASE_TAG"
              VERSION=$(./.github/scripts/versioning/version-generator-for-rc.sh "$BASE_TAG" 2>&1 | tee /dev/stderr | tail -n 1)
            elif [[ "$INPUT_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
              echo "🔢 Using provided RC version directly: $INPUT_VERSION"
              VERSION="$INPUT_VERSION"
            else
              echo "🔢 Using provided version as RC base: $INPUT_VERSION"
              VERSION=$(./.github/scripts/versioning/version-generator-for-rc.sh "$INPUT_VERSION" 2>&1 | tee /dev/stderr | tail -n 1)
            fi

          # Manual override for non-RC builds (e.g. preview)
          elif [[ "$BUILD_TYPE" != "release" && -n "$INPUT_VERSION" ]]; then
            VERSION="$INPUT_VERSION"

          # Pull Request build
          elif [[ "$REF" =~ ^refs/pull/([0-9]+)/merge$ ]]; then
            PR_NUMBER=$(printf "%04d" "${BASH_REMATCH[1]}")
            VERSION="PR-${PR_NUMBER}"

          # Branch-based manual or CI build
          elif [[ "$REF" =~ ^refs/heads/(.+)$ ]]; then
            BRANCH_NAME="${BASH_REMATCH[1]}"
            SAFE_BRANCH_NAME=$(echo "${BRANCH_NAME}" | tr '/' '-')

            if [[ "$EVENT" == "workflow_dispatch" ]]; then
              PR_VERSION=$(./.github/scripts/versioning/detect-pr-number-on-branch.sh "${BRANCH_NAME}" "${GITHUB_REPOSITORY}" "${GITHUB_TOKEN}")

              if [[ -n "${PR_VERSION}" ]]; then
                  VERSION="${PR_VERSION}"
                  echo "✅ Using detected PR version: ${VERSION}"
              else
                  VERSION="manual-${SAFE_BRANCH_NAME}"
                  echo "ℹ️ No open PR found — using fallback version: ${VERSION}"
              fi
            else
              VERSION="${SAFE_BRANCH_NAME}"
            fi

          # Fallback to short commit SHA
          else
            SHORT_SHA=$(git rev-parse --short HEAD)
            VERSION="commit-${SHORT_SHA}"
          fi

          if [[ -z "$VERSION" ]]; then
            VERSION="N/A"
            echo "⚠️ No valid version determined, using fallback: $VERSION"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🏷️ Determined version: $VERSION"

      - name: 📝 Check if Release Version Already Exists
        id: check_release
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?$ ]]; then
            echo "🏷️ Tag push detected — skipping release existence check (Git guarantees uniqueness)."
            echo "exists=false" >> "$GITHUB_OUTPUT"
          else
            .github/scripts/release/check-release-exists.sh "${{ steps.get_version.outputs.version }}" "${{ github.repository }}" "$GITHUB_TOKEN"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📄 Summarize Build Version Info
        if: ${{ always() && inputs.buildType != 'preview' }}
        run: |
          echo "### 🔖 Version Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type:** \`${{ inputs.buildType }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** \`${{ github.event_name }}\` → \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Resolved Version:** \`${{ steps.get_version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY

          if [[ -z "${{ steps.get_version.outputs.version }}" ]]; then
            echo "- ⚠️ No version was determined - check the 'Determine Version' step logs for details." >> $GITHUB_STEP_SUMMARY
          elif [[ "${GITHUB_REF}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?$ ]]; then
            echo "- 🏷️ This was a **tag push** - tag already exists by design."
          else
            if [[ "${{ steps.check_release.outputs.exists }}" == "true" ]]; then
              echo "- ⚠️ GitHub Release with tag \`${{ steps.get_version.outputs.version }}\` **already exists** - run will fail on purpose to avoid overwrite." >> $GITHUB_STEP_SUMMARY
            else
              echo "- ✅ Tag \`${{ steps.get_version.outputs.version }}\` **does not exist yet** - good to go!" >> $GITHUB_STEP_SUMMARY
            fi
          fi