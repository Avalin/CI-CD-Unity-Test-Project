name: ðŸš€ Full CI/CD Pipeline

on:
  workflow_run:
    workflows: ["ðŸš€ CI - Tests"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      buildType:
        description: "Build type: 'preview', 'release_candidate', 'release'"
        required: true
        default: "preview"
        type: choice
        options:
          - preview
          - release_candidate
          - release

permissions:
  contents: write
  pull-requests: write

jobs:
  setup-prerequisites:
    name: Setup Prerequisites
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    uses: avalin/unity-ci-templates/.github/workflows/ci-cd-prerequisites.yml@main
    with:
      excludesUnityTests: ${{ vars.EXCLUDE_UNITY_TESTS }}
      deployTargets: ${{ vars.DEPLOY_TARGETS }}
    secrets: inherit

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 2. Build
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  build:
    name: Build
    needs: [ setup-prerequisites ]
    if: >
      always() &&
      (
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
      )
    uses: avalin/unity-ci-templates/.github/workflows/step-2-build.yml@main
    with:
      projectName: ${{ vars.PROJECT_NAME }}
      buildType: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.buildType || 'release' }}
      targetPlatforms: ${{ github.event_name == 'workflow_dispatch' && vars.TARGET_PLATFORMS_PREVIEW || vars.TARGET_PLATFORMS_RELEASE }}
      combineArtifacts: ${{ fromJSON(needs.setup-prerequisites.outputs.requiresCombinedArtifact || 'true') }}
      timeoutMinutes: ${{ fromJson(vars.TIMEOUT_BUILD_IN_MINUTES || '30') }}
      retentionDays: ${{ github.event_name == 'workflow_dispatch' && fromJson(vars.RETENTION_DAYS_PREVIEW) || fromJson(vars.RETENTION_DAYS_RELEASE) }}
    secrets:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 3. Release
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  release:
    name: Release
    needs: [ setup-prerequisites, build ]
    if: > 
      always() && 
      needs.build.result == 'success' && 
      (
        (github.event_name == 'workflow_dispatch' && (inputs.buildType == 'release' || inputs.buildType == 'release_candidate')) ||
        (github.event_name == 'workflow_run')
      )
    uses: avalin/unity-ci-templates/.github/workflows/step-3-release.yml@main
    with:
      buildType: release
      version: ${{ needs.build.outputs.version }}
      projectName: ${{ vars.PROJECT_NAME }}
      targetPlatforms: ${{ github.event_name == 'workflow_dispatch' && vars.TARGET_PLATFORMS_PREVIEW || vars.TARGET_PLATFORMS_RELEASE }}
      combineArtifacts: ${{ fromJSON(needs.setup-prerequisites.outputs.requiresCombinedArtifact || 'true') }}
      skipPerPlatformArtifacts: ${{ fromJSON(needs.setup-prerequisites.outputs.skipPerPlatformArtifacts || 'true') }}
    secrets: inherit

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 4. Deploy
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  deploy:
    name: Deploy
    needs: [ setup-prerequisites, build, release ]
    if: > 
      always() &&
      needs.release.result == 'success' &&
      fromJson(needs.setup-prerequisites.outputs.validDeployTargets) != '[]'
    uses: avalin/unity-ci-templates/.github/workflows/step-4-deploy.yml@main
    with:
      buildType: release
      version: ${{ needs.build.outputs.version }}
      projectName: ${{ vars.PROJECT_NAME }}
      deployTargets: ${{ needs.setup-prerequisites.outputs.validDeployTargets }}
      hasCombinedArtifacts: ${{ needs.setup-prerequisites.outputs.requiresCombinedArtifact }}
      artifactSource: build
    secrets: inherit

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 5. Notify
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  notify:
    name: Notify
    needs: [ build, release, deploy ]
    if: > 
      always() && 
      (
        github.event_name == 'workflow_dispatch' ||
        github.event_name == 'workflow_run'
      )
    uses: avalin/unity-ci-templates/.github/workflows/step-5-notify.yml@main
    with:
      releaseResult: ${{ needs.release.result }}
      releaseErrorMessage: ${{ needs.release.outputs.releaseErrorMessage }}
      deployResult: ${{ needs.deploy.result }}
      version: ${{ needs.build.outputs.version }}
    secrets: inherit