name: ðŸš€ Full CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      triggeredBy:
        type: string
        required: true
      buildType:
        type: string
        required: true
      version:
        type: string
        required: true
      validDeployTargets:
        type: string
        required: true
      requiresCombined:
        type: string
        required: true
      skipPerPlatform:
        type: string
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 1. Run Tests
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  run-tests:
    name: Run Tests
    if: >
      always() &&
      (vars.EXCLUDE_UNITY_TESTS || 'false') == 'false' &&
      (
        github.event_name == 'pull_request' ||
        github.event_name == 'workflow_dispatch' ||
        (
          github.event_name == 'push' &&
          !contains(github.event.head_commit.message, '[skip tests]')
        )
      )
    uses: avalin/unity-ci-templates/.github/workflows/step-1-test.yml@main
    with:
      unityVersion: ${{ vars.UNITY_VERSION || 'auto' }}
      useGitLfs: ${{ vars.USE_GIT_LFS || 'false' }}
      editModePath: ${{ vars.UNITY_TESTS_EDITMODE_PATH || 'Assets/Tests/Editor' }}
      playModePath: ${{ vars.UNITY_TESTS_PLAYMODE_PATH || 'Assets/Tests/PlayMode' }}
      timeoutMinutes: ${{ fromJson(vars.TIMEOUT_TESTS_IN_MINUTES || '15') }}
      quietMode: ${{ vars.UNITY_TESTS_QUIET_MODE || 'false' }}
    secrets:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 2. Build
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  build:
    name: Build
    needs: [ run-tests ]
    # Build if ALL of these are true:
    # - Tests passed
    # - The event is a pull_request, workflow_dispatch, or version tag push
    if: >
      always() &&
      (needs.run-tests.result == 'success' || needs.run-tests.result == 'skipped') &&
      (
        github.event_name == 'pull_request' ||
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
      )
    uses: avalin/unity-ci-templates/.github/workflows/step-2-build.yml@main
    with:
      # If the event is a push with a tag, force buildType to "release"; otherwise, use the input.
      projectName: ${{ vars.PROJECT_NAME }}
      buildType: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && 'release' || github.event.inputs.buildType }}
      targetPlatforms: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) && vars.TARGET_PLATFORMS_RELEASE || vars.TARGET_PLATFORMS_PREVIEW }}
      combineArtifacts: ${{ fromJSON(needs.setup-prerequisites.outputs.requiresCombinedArtifact || 'true') }}
      timeoutMinutes: ${{ fromJson(vars.TIMEOUT_BUILD_IN_MINUTES || '30') }}
      retentionDays: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && fromJson(vars.RETENTION_DAYS_RELEASE) || fromJson(vars.RETENTION_DAYS_PREVIEW) }}
    secrets:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 3. Release
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  release:
    name: Release
    needs: [ build ]
    if: > 
      always() && 
      needs.build.result == 'success' && 
      (
        inputs.buildType == 'release' || 
        inputs.buildType == 'release_candidate'
      )
    uses: avalin/unity-ci-templates/.github/workflows/step-3-release.yml@main
    with:
      buildType: release
      version: ${{ needs.build.outputs.version }}
      projectName: ${{ vars.PROJECT_NAME }}
      targetPlatforms: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) && vars.TARGET_PLATFORMS_RELEASE || vars.TARGET_PLATFORMS_PREVIEW }}
      combineArtifacts: ${{ fromJSON(needs.setup-prerequisites.outputs.requiresCombinedArtifact || 'true') }}
      skipPerPlatformArtifacts: ${{ fromJSON(needs.setup-prerequisites.outputs.skipPerPlatformArtifacts || 'true') }}
    secrets: inherit

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 4. Deploy
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  deploy:
    name: Deploy
    needs: [ build, release ]
    if: > 
      always() &&
      needs.release.result == 'success' &&
      fromJson(needs.setup-prerequisites.outputs.validDeployTargets) != '[]'
    uses: avalin/unity-ci-templates/.github/workflows/step-4-deploy.yml@main
    with:
      buildType: release
      version: ${{ needs.build.outputs.version }}
      projectName: ${{ vars.PROJECT_NAME }}
      deployTargets: ${{ needs.setup-prerequisites.outputs.validDeployTargets }}
      hasCombinedArtifacts: ${{ needs.setup-prerequisites.outputs.requiresCombinedArtifact }}
      artifactSource: build
    secrets: inherit

  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  # 5. Notify
  # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  notify:
    name: Notify
    needs: [ build, release, deploy ]
    if: > 
      always() && 
      startsWith(github.ref, 'refs/tags/')
    uses: avalin/unity-ci-templates/.github/workflows/step-5-notify.yml@main
    with:
      releaseResult: ${{ needs.release.result }}
      releaseErrorMessage: ${{ needs.release.outputs.releaseErrorMessage }}
      deployResult: ${{ needs.deploy.result }}
      version: ${{ needs.build.outputs.version }}
    secrets: inherit