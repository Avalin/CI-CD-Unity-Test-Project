name: 🔖 Version Resolver

on:
  workflow_call:
    inputs:
      buildType:
        description: "Build type: preview | release_candidate | release"
        required: true
        type: string
      buildVersion:
        description: "Optional version override from workflow input"
        required: false
        type: string
    outputs:
      buildVersion:
        description: "The resolved build version string"
        value: ${{ jobs.version_resolver.outputs.buildVersion }}
      releaseExists:
        description: "Whether a GitHub release already exists for this version"
        value: ${{ jobs.version_resolver.outputs.releaseExists }}

jobs:
  version_resolver:
    name: Generate Build Version
    runs-on: ubuntu-latest
    outputs:
      buildVersion: ${{ steps.get_version.outputs.version }}
      releaseExists: ${{ steps.check_release.outputs.release_exists }}

    steps:
      - name: 📡 Setup Git (fetch tags + default branch)
        run: |
          git init
          git remote add origin https://github.com/${{ github.repository }}
          git fetch origin --tags --force
          git fetch origin $(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
          git checkout $(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')

      - name: 🔖 Resolve Build Version
        id: get_version
        uses: avalin/unity-ci-templates/.github/actions/resolve-build-version@v1
        with:
          ref: "${GITHUB_REF}"
          event: "${GITHUB_EVENT_NAME}"
          input_version: "${{ inputs.buildVersion }}"
          build_type: "${{ inputs.buildType }}"

      - name: 🔍 Check if Release Exists
        id: check_release
        uses: avalin/unity-ci-templates/.github/actions/check-release-exists@v1
        with:
          version: ${{ steps.get_version.outputs.version }}
          repo: ${{ github.repository }}
          token: ${{ github.token }}

      - name: 📄 Summarize Build Version Info
        if: ${{ always() }}
        run: |
          echo "### 🔖 Version Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type:** \`${{ inputs.buildType }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** \`${{ github.event_name }}\` → \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Resolved Version:** \`${{ steps.get_version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY

          if [[ -z "${{ steps.get_version.outputs.version }}" ]]; then
            echo "- ⚠️ No version was determined - check the 'Resolve Build Version' step logs for details." >> $GITHUB_STEP_SUMMARY
          else
            if [[ "${{ steps.check_release.outputs.release_exists }}" == "true" ]]; then
              echo "- ⚠️ GitHub Release with tag \`${{ steps.get_version.outputs.version }}\` **already exists**." >> $GITHUB_STEP_SUMMARY
            else
              echo "- ✅ Tag \`${{ steps.get_version.outputs.version }}\` **does not exist yet** - good to go!" >> $GITHUB_STEP_SUMMARY
            fi
          fi