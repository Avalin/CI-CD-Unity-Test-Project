name: 🧪 Test - Step 4 Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: "Build type: 'preview' for manual/dev builds, 'release_candidate' for staging (e.g., v1.2.3-rc.1), 'release' for production (e.g., v1.2.3)"
        required: true
        default: "release"
        type: choice
        options:
          - preview
          - release_candidate
          - release
      artifactSource:
        description: "Whether deployment files comes from a fresh build or an existing release"
        required: true
        default: "build"
        type: choice
        options:
          - build
          - release
      version:
        description: "Optional version string (e.g. v1.2.3 or v1.2.3-rc.1). Leave blank to auto-generate (e.g. PR-0001, manual-main)"
        required: false
        default: "v0.0.0"
        type: string
      projectName:
        description: "Project name for artifacts"
        required: true
        default: "Unity_CI_Templates"
      targetPlatforms:
        description: "JSON array of platforms to build"
        required: true
        default: '["Android", "WebGL", "StandaloneLinux64", "StandaloneWindows", "StandaloneWindows64", "StandaloneOSX", "iOS"]'
      deployTargets:
        description: "JSON array of deploy targets (e.g. [\"itch.io\",\"s3\"])"
        required: true
        default: '["itch.io", "appcenter", "firebase", "s3", "gh-pages", "steam", "testflight", "custom-server"]'
        type: string

permissions:
  contents: write

jobs:
  # ─────────────────────────────────────────────────────────────────────────────
  # Release Deployment Preparation
  # ─────────────────────────────────────────────────────────────────────────────
  validate_release:
    name: Validate Release Tag and Artifacts
    runs-on: ubuntu-latest
    if:  ${{ inputs.artifactSource == 'release' }}
    outputs:
      hasCombinedArtifacts: ${{ steps.check.outputs.hasCombinedArtifacts }}
    steps:
      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Check GitHub Release Exists and Artifacts
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Checking if release '${{ inputs.version }}' exists..." | tee -a "$GITHUB_STEP_SUMMARY"

          # Attempt to fetch release data and save to file
          if ! gh api repos/${{ github.repository }}/releases/tags/${{ inputs.version }} --jq '.' > release.json; then
            echo "❌ Release '${{ inputs.version }}' not found or API call failed." | tee -a "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          echo "✅ Release found. Redeploying: '${{ inputs.version }}'..." | tee -a "$GITHUB_STEP_SUMMARY"

          # Load release data
          RELEASE_DATA=$(cat release.json)

          # Check for combined artifact
          COMBINED_FOUND=$(echo "$RELEASE_DATA" | jq -r '.assets[]?.name' | grep -c 'all-platforms' || true)
          if [ "$COMBINED_FOUND" -gt 0 ]; then
            echo "✅ Combined artifact detected." | tee -a "$GITHUB_STEP_SUMMARY"
            echo "hasCombinedArtifacts=true" >> "$GITHUB_OUTPUT"
          else
            echo "ℹ️ No combined artifact detected." | tee -a "$GITHUB_STEP_SUMMARY"
            echo "hasCombinedArtifacts=false" >> "$GITHUB_OUTPUT"
          fi

  # ─────────────────────────────────────────────────────────────────────────────
  # Build Deployment Preparation
  # ─────────────────────────────────────────────────────────────────────────────
  prepare_metadata:
    name: ⏳ Prepare Metadata
    if:  ${{ inputs.artifactSource == 'build' }}
    uses: ./.github/workflows/prepare-metadata.yml
    with:
      skipTests: true
      testsOnly: false
      deployTargets: ${{ inputs.deployTargets }}
      buildType: ${{ inputs.buildType }}
      version: ${{ inputs.version }}

  dry_build:
    name: 🧩 Create Dry-Build
    needs: prepare_metadata
    if:  ${{ inputs.artifactSource == 'build' }}
    uses: ./.github/workflows/dry-build.yml
    with:
      version: ${{ needs.prepare_metadata.outputs.version }}
      projectName: ${{ inputs.projectName }}
      targetPlatforms: ${{ inputs.targetPlatforms }}
      combineArtifacts: ${{ needs.prepare_metadata.outputs.requiresCombined }}
    secrets: inherit

  # ─────────────────────────────────────────────────────────────────────────────
  # Test Deployment Steps
  # ─────────────────────────────────────────────────────────────────────────────
  test_deploy_from_build:
    name: 🌍 Test Deploy From Build
    needs: 
        - prepare_metadata 
        - dry_build
    if:  ${{ needs.prepare_metadata.outputs.validDeployTargets != '[]' && inputs.artifactSource == 'build' }}
    uses: avalin/unity-ci-templates/.github/workflows/step-4-deploy.yml@main
    with:
      buildType: ${{ inputs.buildType }}
      version: ${{ inputs.version }}
      projectName: ${{ inputs.projectName }}
      deployTargets: ${{ needs.prepare_metadata.outputs.validDeployTargets }}
      targetPlatforms: ${{ inputs.targetPlatforms }}
      hasCombinedArtifacts: ${{ needs.prepare_metadata.outputs.requiresCombined }}
      artifactSource: ${{ inputs.artifactSource }}
    secrets: inherit

  test_deploy_from_release:
    name: 🌍 Test Deploy From Release
    needs: validate_release
    if:  ${{ inputs.artifactSource == 'release' }}
    uses: avalin/unity-ci-templates/.github/workflows/step-4-deploy.yml@main
    with:
      buildType: ${{ inputs.buildType }}
      version: ${{ inputs.version }}
      projectName: ${{ vars.PROJECT_NAME }}
      deployTargets: ${{ inputs.deployTargets }}
      targetPlatforms: '[]'
      hasCombinedArtifacts: ${{ needs.validate_release.outputs.hasCombinedArtifacts }}
      artifactSource: release
    secrets: inherit