name: üìö Validate Deploy Targets

on:
  workflow_call:
    inputs:
      buildType:
        type: string
        required: true
      deployTargets:
        type: string
        required: true
      buildTargets:
        type: string
        required: true
    outputs:
      validDeployTargets:
        value: ${{ jobs.validate.outputs.validDeployTargets }}
      skipAnalysis:
        value: ${{ jobs.validate.outputs.skipAnalysis }}

jobs:
  validate:
    name: ‚úÖ Validate Deploy Targets
    runs-on: ubuntu-latest
    outputs:
      validDeployTargets: ${{ steps.filter.outputs.validDeployTargets }}
      skipAnalysis: ${{ steps.early-check.outputs.skipRest }}

    steps:
      - name: üìÅ Checkout config folder
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/config
          sparse-checkout-cone-mode: false
          fetch-depth: 1

      - name: üîç Inspect Input
        id: early-check
        run: |
          RAW_INPUT='${{ inputs.deployTargets }}'

          echo "üîç Raw deployTargets input: $RAW_INPUT"

          # Validate JSON format
          if ! echo "$RAW_INPUT" | jq empty 2>/dev/null; then
            echo "‚ùå Invalid JSON in deployTargets input!"
            echo "validDeployTargets=[]" >> $GITHUB_OUTPUT
            echo "skipRest=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check for empty array
          if [ "$(echo "$RAW_INPUT" | jq 'length')" -eq 0 ]; then
            echo "‚ÑπÔ∏è No deploy targets provided (empty array). Skipping validation."
            echo "validDeployTargets=[]" >> $GITHUB_OUTPUT
            echo "skipRest=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "‚úÖ Input is non-empty and valid JSON. Proceeding..."
          echo "skipRest=false" >> $GITHUB_OUTPUT

      - name: ‚öôÔ∏è Validate Targets and Minimum Build Type
        id: filter
        if: steps.early-check.outputs.skipRest != 'true'
        run: |
          RAW_INPUT='${{ inputs.deployTargets }}'
          CONFIG_FILE=".github/config/deploy-targets.json"
          FALLBACK_URL="https://raw.githubusercontent.com/avalin/unity-ci-templates/main/.github/config/deploy-targets.json"
          BUILD_TYPE="${{ inputs.buildType }}"
          BUILD_TARGETS=$(echo '${{ inputs.buildTargets }}' | jq -r '.[]')

          echo "üîç Checking for local config file..."

          if [ -f "$CONFIG_FILE" ]; then
            echo "‚úÖ Found local config file: $CONFIG_FILE"
          else
            echo "‚ö†Ô∏è Not found. Downloading from: $FALLBACK_URL"
            mkdir -p "$(dirname "$CONFIG_FILE")"
            curl -sSL "$FALLBACK_URL" -o "$CONFIG_FILE"
          fi

          case "$BUILD_TYPE" in
            preview) BUILD_RANK=1 ;;
            release_candidate) BUILD_RANK=2 ;;
            release) BUILD_RANK=3 ;;
            *) echo "‚ùå Unknown build type: $BUILD_TYPE"; exit 1 ;;
          esac

          FINAL_VALID=()
          INVALID=()
          SKIPPED_MINIMUM=()
          SKIPPED_NO_BUILD_TARGETS=()

          for TARGET in $(echo "$RAW_INPUT" | jq -r '.[]'); do
            if jq -e --arg key "$TARGET" '.[$key]' "$CONFIG_FILE" >/dev/null; then
              MIN_TYPE=$(jq -r --arg key "$TARGET" '.[$key].minimumBuildType' "$CONFIG_FILE")
              BUILD_TARGETS=$(jq -r --arg key "$TARGET" '.[$key].compatibleBuildTargets[]' "$CONFIG_FILE")

              case "$MIN_TYPE" in
                preview) MIN_RANK=1 ;;
                release_candidate) MIN_RANK=2 ;;
                release) MIN_RANK=3 ;;
                *) echo "‚ùå Unknown minimumBuildType for $TARGET: $MIN_TYPE"; exit 1 ;;
              esac

              if [ "$BUILD_RANK" -lt "$MIN_RANK" ]; then
                SKIPPED_MINIMUM+=("$TARGET (requires $MIN_TYPE)")
                continue
              fi

              MATCH_FOUND=false
              for target in $BUILD_TARGETS; do
                if echo "$COMPATIBLE_BUILD_TARGETS" | grep -q "^$target$"; then
                  MATCH_FOUND=true
                  break
                fi
              done

              if [ "$MATCH_FOUND" = true ]; then
                FINAL_VALID+=("$TARGET")
              else
                SKIPPED_NO_BUILD_TARGETS+=("$TARGET")
              fi
            else
              INVALID+=("$TARGET")
            fi
          done

          echo "‚úÖ Valid targets: ${FINAL_VALID[*]}"
          echo "‚ùå Invalid targets: ${INVALID[*]}"
          echo "‚ö†Ô∏è Skipped (minimum buildType not met): ${SKIPPED_MINIMUM[*]}"
          echo "‚ö†Ô∏è Skipped (no compatible build targets): ${SKIPPED_NO_BUILD_TARGETS[*]}"

          if [ "${#FINAL_VALID[@]}" -eq 0 ]; then
            json='[]'
          else
            json=$(printf '%s\n' "${FINAL_VALID[@]}" | jq -R . | jq -s .)
          fi

          echo "validDeployTargets<<EOF" >> $GITHUB_OUTPUT
          echo "$json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "FINAL_VALID_TARGETS=${FINAL_VALID[*]}" >> $GITHUB_ENV
          echo "INVALID_TARGETS=${INVALID[*]}" >> $GITHUB_ENV
          echo "SKIPPED_MINIMUM=$(IFS='|'; echo "${SKIPPED_MINIMUM[*]}")" >> $GITHUB_ENV
          echo "SKIPPED_NO_BUILD_TARGETS=$(IFS='|'; echo "${SKIPPED_NO_BUILD_TARGETS[*]}")" >> $GITHUB_ENV

      - name: üìã Summary of Target Validation
        if: always()
        run: |
          VALID_TARGETS="${VALID_TARGETS:-}"
          INVALID_TARGETS="${INVALID_TARGETS:-}"
          SKIPPED_MINIMUM="${SKIPPED_MINIMUM:-}"
          SKIPPED_NO_BUILD_TARGETS="${SKIPPED_NO_BUILD_TARGETS:-}"

          IFS='|' read -r -a SKIPPED_MINIMUM_ARRAY <<< "$SKIPPED_MINIMUM"
          IFS='|' read -r -a SKIPPED_NO_BUILD_TARGETS_ARRAY <<< "$SKIPPED_NO_BUILD_TARGETS"

          echo ""
          echo "üìã Deploy Target Validation Summary"
          echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
          if [ -n "$VALID_TARGETS" ]; then
            echo "‚úÖ Final Valid Targets:"
            for v in $VALID_TARGETS; do echo "  - $v"; done
          else
            echo "‚ÑπÔ∏è No valid deploy targets remaining after validation."
          fi

          if [ -n "$INVALID_TARGETS" ]; then
            echo ""
            echo "‚ö†Ô∏è Invalid (Unknown) Targets:"
            for i in $INVALID_TARGETS; do echo "  - $i"; done
          fi

          if [ "${#SKIPPED_MINIMUM_ARRAY[@]}" -gt 0 ]; then
            echo ""
            echo "‚ö†Ô∏è Skipped (Minimum BuildType Not Met):"
            for s in "${SKIPPED_MINIMUM_ARRAY[@]}"; do
              echo "  - $s"
            done
          fi

          if [ "${#SKIPPED_NO_BUILD_TARGETS_ARRAY[@]}" -gt 0 ]; then
            echo ""
            echo "‚ö†Ô∏è Skipped (No Compatible Build Targets):"
            for s in "${SKIPPED_NO_BUILD_TARGETS_ARRAY[@]}"; do
              echo "  - $s"
            done
          fi
          echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"