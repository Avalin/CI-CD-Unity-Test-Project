name: ‚úÖ Validate Deploy Targets

on:
  workflow_call:
    inputs:
      deployTargets:
        type: string
        required: true
    outputs:
      validTargets:
        value: ${{ jobs.validate.outputs.valid }}

jobs:
  validate:
    name: ‚úÖ Validate Deploy Targets
    runs-on: ubuntu-latest
    outputs:
      valid: ${{ steps.filter.outputs.validTargets }}
      requiresCombinedArtifact: ${{ steps.filter.outputs.requiresCombinedArtifact }}  
    steps:
      - name: üìÅ Checkout repo
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Filter Valid Targets
        id: filter
        run: |
          RAW_INPUT='${{ inputs.deployTargets }}'
          CONFIG_FILE=".github/config/deploy-targets.json"
          FALLBACK_URL="https://raw.githubusercontent.com/avalin/unity-ci-templates/main/.github/config/deploy-targets.json"

          echo "üîç Raw deployTargets input: $RAW_INPUT"

          echo "üîç Checking for local config file..."
          if [ -f "$CONFIG_FILE" ]; then
            echo "‚úÖ Found local config file: $CONFIG_FILE"
          else
            echo "‚ö†Ô∏è Not found. Downloading from: $FALLBACK_URL"
            mkdir -p "$(dirname "$CONFIG_FILE")"
            curl -sSL "$FALLBACK_URL" -o "$CONFIG_FILE"
          fi

          # Validate input JSON
          if ! echo "$RAW_INPUT" | jq empty 2>/dev/null; then
            echo "‚ùå Invalid JSON in deployTargets input!"
            echo "validTargets=[]" >> $GITHUB_OUTPUT
            echo "requiresCombinedArtifact=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          VALID_TARGETS=$(jq -r 'keys[]' "$CONFIG_FILE")
          echo "üìö Valid targets from config: $(echo "$VALID_TARGETS" | paste -sd ' ' -)"

          INPUTS=$(echo "$RAW_INPUT" | jq -r '.[]')
          VALID=()
          INVALID=()
          NEEDS_COMBINED=false

          for TARGET in $INPUTS; do
            if echo "$VALID_TARGETS" | grep -qx "$TARGET"; then
              VALID+=("$TARGET")

              # Check if this target requires combined artifact
              COMBINED=$(jq -r --arg t "$TARGET" '.[$t].requiresCombinedArtifact // false' "$CONFIG_FILE")
              if [ "$COMBINED" = "true" ]; then
                NEEDS_COMBINED=true
              fi
            else
              INVALID+=("$TARGET")
            fi
          done

          echo "‚úÖ Valid targets: ${VALID[*]}"
          if [ "${#INVALID[@]}" -gt 0 ]; then
            echo "‚ö†Ô∏è Invalid targets: ${INVALID[*]}"
          fi

          # Output validTargets as JSON
          json=$(printf '%s\n' "${VALID[@]}" | jq -R . | jq -s .)
          echo "validTargets<<EOF" >> $GITHUB_OUTPUT
          echo "$json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Output whether a combined artifact is required
          echo "requiresCombinedArtifact=$NEEDS_COMBINED" >> $GITHUB_OUTPUT