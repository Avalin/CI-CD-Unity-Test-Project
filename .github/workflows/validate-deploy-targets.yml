name: 📚 Validate Deploy Targets

on:
  workflow_call:
    inputs:
      deployTargets:
        type: string
        required: true
    outputs:
      validTargets:
        value: ${{ jobs.validate.outputs.validTargets }}
      skipAnalysis:
        value: ${{ jobs.validate.outputs.skipAnalysis }}

jobs:
  validate:
    name: ✅ Validate Deploy Targets
    runs-on: ubuntu-latest
    outputs:
      validTargets: ${{ steps.filter.outputs.validTargets }}
      skipAnalysis: ${{ steps.early-check.outputs.skipRest }}

    steps:
      - name: 🧼 Sanitize deployTargets Input
        id: sanitize
        run: |
          RAW_INPUT='${{ inputs.deployTargets }}'

          # Replace single quotes with double quotes
          SANITIZED_INPUT=$(echo "$RAW_INPUT" | sed "s/'/\"/g")

          echo "✅ Sanitized deployTargets: $SANITIZED_INPUT"

          # Export sanitized input for later steps
          echo "sanitized=$SANITIZED_INPUT" >> "$GITHUB_OUTPUT"

      - name: 🔍 Inspect Input
        id: early-check
        run: |
          SANITIZED_INPUT='${{ steps.sanitize.outputs.sanitized }}'

          echo "🔍 Raw deployTargets input: $SANITIZED_INPUT"

          # Validate JSON format
          if ! echo "$SANITIZED_INPUT" | jq empty 2>/dev/null; then
            echo "❌ Invalid JSON in deployTargets input!"
            echo "validTargets=[]" >> $GITHUB_OUTPUT
            echo "VALID_TARGETS=" >> $GITHUB_ENV
            echo "INVALID_TARGETS=" >> $GITHUB_ENV
            echo "skipRest=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check for empty array
          if [ "$(echo "$SANITIZED_INPUT" | jq 'length')" -eq 0 ]; then
            echo "ℹ️ No deploy targets provided (empty array). Skipping validation."
            echo "validTargets=[]" >> $GITHUB_OUTPUT
            echo "VALID_TARGETS=" >> $GITHUB_ENV
            echo "INVALID_TARGETS=" >> $GITHUB_ENV
            echo "skipRest=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "✅ Input is non-empty and valid JSON. Proceeding..."
          echo "skipRest=false" >> $GITHUB_OUTPUT

      - name: 📁 Checkout repo
        if: steps.early-check.outputs.skipRest != 'true'
        uses: actions/checkout@v4

      - name: ⚙️ Filter Valid Targets
        id: filter
        if: steps.early-check.outputs.skipRest != 'true'
        run: |
          RAW_INPUT='${{ inputs.deployTargets }}'
          CONFIG_FILE=".github/config/deploy-targets.json"
          FALLBACK_URL="https://raw.githubusercontent.com/avalin/unity-ci-templates/main/.github/config/deploy-targets.json"

          echo "🔍 Checking for local config file..."
          if [ -f "$CONFIG_FILE" ]; then
            echo "✅ Found local config file: $CONFIG_FILE"
          else
            echo "⚠️ Not found. Downloading from: $FALLBACK_URL"
            mkdir -p "$(dirname "$CONFIG_FILE")"
            curl -sSL "$FALLBACK_URL" -o "$CONFIG_FILE"
          fi

          VALID_KEYS=$(jq -r 'keys[]' "$CONFIG_FILE")
          echo "📚 Valid targets from config: $(echo "$VALID_KEYS" | paste -sd ' ' -)"

          INPUTS=$(echo "$RAW_INPUT" | jq -r '.[]')
          VALID=()
          INVALID=()

          for TARGET in $INPUTS; do
            if echo "$VALID_KEYS" | grep -qx "$TARGET"; then
              VALID+=("$TARGET")
            else
              INVALID+=("$TARGET")
            fi
          done

          echo "✅ Valid targets: ${VALID[*]}"
          echo "⚠️ Invalid targets: ${INVALID[*]}"

          # Output validTargets as JSON array for outputs
          json=$(printf '%s\n' "${VALID[@]}" | jq -R . | jq -s .)
          echo "validTargets<<EOF" >> $GITHUB_OUTPUT
          echo "$json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Export for summary step
          echo "VALID_TARGETS=${VALID[*]}" >> $GITHUB_ENV
          echo "INVALID_TARGETS=${INVALID[*]}" >> $GITHUB_ENV

      - name: 📋 Summary of Target Validation
        if: always()
        run: |
          # Safety fallback: define vars if they're unset
          VALID_TARGETS="${VALID_TARGETS:-}"
          INVALID_TARGETS="${INVALID_TARGETS:-}"

          echo ""
          echo "📋 Deploy Target Validation Summary"
          echo "────────────────────────────────────"
          if [ -n "$VALID_TARGETS" ]; then
            echo "✅ Valid Targets:"
            for v in $VALID_TARGETS; do echo "  - $v"; done
          else
            echo "ℹ️ No valid deploy targets found."
          fi

          if [ -n "$INVALID_TARGETS" ]; then
            echo ""
            echo "⚠️ Invalid Targets:"
            for i in $INVALID_TARGETS; do echo "  - $i"; done
          fi