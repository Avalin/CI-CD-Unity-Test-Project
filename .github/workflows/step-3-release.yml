name: 📦 Step 3 - Release

on:
  workflow_call:
    inputs:
      buildType:
        description: "Build type: 'preview' | 'release_candidate' | 'release'"
        type: string
        required: true
      version:
        description: "The version/tag name (e.g., v1.2.3)"
        type: string
        required: true
      projectName:
        description: "Project name used in the artifact"
        type: string
        required: true
      targetPlatforms:
        description: "JSON array of platforms to expect artifacts for"
        type: string
        required: true
      combineArtifacts:
        description: "Whether to upload the combined artifact to the release"
        type: string
        default: "false"
        required: false
      skipPerPlatformArtifacts:
        description: "Whether to skip uploading per-platform artifacts"
        type: string
        default: "false"
        required: false      
    outputs:
      releaseErrorMessage:
        description: "Error message if release failed"
        value: ${{ jobs.publish.outputs.releaseErrorMessage }}

jobs:
  publish:
    if: ${{ inputs.buildType == 'release' || inputs.buildType == 'release_candidate' }}
    name: 📤 Publish GitHub Release
    runs-on: ubuntu-latest
    outputs:
      releaseErrorMessage: ${{ steps.error-handler.outputs.releaseErrorMessage }}

    steps:
      - name: 📁 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: 🧰 Setup Helper Scripts
        run: chmod +x .github/scripts/release/*.sh

      - name: 📝 Create GitHub Release
        id: create_release
        run: |
          VERSION="${{ inputs.version }}"
          BUILD_TYPE="${{ inputs.buildType }}"

          IS_PRERELEASE=$([[ "$VERSION" == *-* ]] && echo true || echo false)

          echo "📝 Creating GitHub release for tag: $VERSION (prerelease: $IS_PRERELEASE, draft: $IS_DRAFT)"

          PAYLOAD=$(jq -n \
            --arg tag_name "$VERSION" \
            --arg name "Release $VERSION" \
            --argjson prerelease "$IS_PRERELEASE" \
            --argjson draft "false" \
            '{ tag_name: $tag_name, name: $name, draft: $draft, prerelease: $prerelease }')

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d "$PAYLOAD" \
            "https://api.github.com/repos/${{ github.repository }}/releases")

          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id // empty')

          if [[ -z "$RELEASE_ID" || "$RELEASE_ID" == "null" ]]; then
            echo "❌ Failed to create release. Full response:"
            echo "$RESPONSE"
            exit 1
          fi

          echo "release_id=$RELEASE_ID" >> "$GITHUB_OUTPUT"
          echo "✅ Created release with ID: $RELEASE_ID"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧮 Upload Per-Platform Artifacts
        if: ${{ inputs.skipPerPlatformArtifacts != 'true' }}
        run: |
          VERSION="${{ inputs.version }}"
          RELEASE_ID="${{ steps.create_release.outputs.release_id }}"
          .github/scripts/release/upload-artifacts.sh \
            "${{ inputs.projectName }}" \
            "$VERSION" \
            "$RELEASE_ID" \
            "${{ github.repository }}" \
            "$GITHUB_TOKEN" \
            '${{ inputs.targetPlatforms }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧮 Upload Combined Artifact
        if: ${{ inputs.combineArtifacts == 'true' }}
        run: |
          VERSION="${{ inputs.version }}"
          PROJECT="${{ inputs.projectName }}"
          COMBINED_PATH="${PROJECT}-${VERSION}"
          COMBINED_ZIP="${PROJECT}-${VERSION}-all-platforms.zip"

          RELEASE_ID="${{ steps.create_release.outputs.release_id }}"

          if [ -d "$COMBINED_PATH" ]; then
            echo "📦 Zipping contents of: $COMBINED_PATH → $COMBINED_ZIP"
            cd "$COMBINED_PATH"
            zip -r "../$COMBINED_ZIP" .
            cd -

            echo "📤 Uploading $COMBINED_ZIP to release ID $RELEASE_ID"
            curl -s -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Content-Type: application/zip" \
              --data-binary @"$COMBINED_ZIP" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$COMBINED_ZIP"
          else
            echo "ℹ️ No combined build artifact found — skipping."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🛠️ Capture Release Errors
        if: failure()
        id: error-handler
        run: |
          ERROR_MESSAGE="Unknown release failure"

          if ! ls * >/dev/null 2>&1; then
            ERROR_MESSAGE="No artifacts found"
          elif ! jq -e .id response.json >/dev/null 2>&1; then
            ERROR_MESSAGE="Failed to create or fetch GitHub Release"
          else
            ERROR_MESSAGE="One or more upload steps failed"
          fi

          echo "releaseErrorMessage=$ERROR_MESSAGE" >> "$GITHUB_OUTPUT"