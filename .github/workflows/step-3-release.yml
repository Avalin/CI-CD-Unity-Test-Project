name: üì¶ Step 3 - Release

on:
  workflow_call:
    inputs:
      buildType:
        description: "Should be 'release' to trigger publishing"
        type: string
        required: true
      version:
        description: "The version/tag name (e.g., v1.2.3)"
        type: string
        required: true
      projectName:
        description: "Project name used in the artifact"
        type: string
        required: true
      targetPlatforms:
        description: "JSON array of platforms to expect artifacts for"
        type: string
        required: true

jobs:
  publish:
    if: ${{ inputs.buildType == 'release' }}
    name: üì§ Publish GitHub Release
    runs-on: ubuntu-latest

    steps:
      - name: üì• Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: üìù Check if Release Already Exists
        id: check_release
        run: |
          VERSION="${{ inputs.version }}"
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION"

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "Accept: application/vnd.github+json" \
            "$API_URL")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "‚úÖ Release exists."
            RELEASE_ID=$(jq -r '.id' response.json)
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "release_id=$RELEASE_ID" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Release does not exist."
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: üìù Create GitHub Release
        if: steps.check_release.outputs.exists != 'true'
        id: create_release
        run: |
          VERSION="${{ inputs.version }}"
          IS_PRERELEASE=$(echo "$VERSION" | grep -q '-' && echo true || echo false)

          PAYLOAD=$(jq -n \
            --arg tag_name "$VERSION" \
            --arg name "Release $VERSION" \
            --argjson prerelease "$IS_PRERELEASE" \
            '{ tag_name: $tag_name, name: $name, draft: false, prerelease: $prerelease }')

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "Accept: application/vnd.github+json" \
            -d "$PAYLOAD" \
            "https://api.github.com/repos/${{ github.repository }}/releases")

          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
          echo "release_id=$RELEASE_ID" >> "$GITHUB_OUTPUT"
          echo "‚úÖ Created release with ID: $RELEASE_ID"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: üßÆ Upload Artifacts
        run: |
          PROJECT="${{ inputs.projectName }}"
          VERSION="${{ inputs.version }}"
          BUILD_TYPE="${{ inputs.buildType }}"
          PLATFORMS=$(echo '${{ inputs.targetPlatforms }}' | jq -r '.[]')
        
          PR_NUMBER="${{ github.event.pull_request.number }}"
          BRANCH="${GITHUB_REF_NAME}"
          COMMIT="${GITHUB_SHA}"
        
          RELEASE_ID="${{ steps.check_release.outputs.release_id || steps.create_release.outputs.release_id }}"
        
          for PLATFORM in $PLATFORMS; do
            ARTIFACT_PATH="release-artifacts/${PROJECT}/${PLATFORM}"
        
            if [ -d "$ARTIFACT_PATH" ]; then
              # üßæ Write metadata
              echo "Project: $PROJECT" > "$ARTIFACT_PATH/metadata.txt"
              echo "Platform: $PLATFORM" >> "$ARTIFACT_PATH/metadata.txt"
              echo "BuildType: $BUILD_TYPE" >> "$ARTIFACT_PATH/metadata.txt"
              echo "Version: $VERSION" >> "$ARTIFACT_PATH/metadata.txt"
              echo "Branch: $BRANCH" >> "$ARTIFACT_PATH/metadata.txt"
              echo "Commit: $COMMIT" >> "$ARTIFACT_PATH/metadata.txt"
              echo "PR: ${PR_NUMBER:-N/A}" >> "$ARTIFACT_PATH/metadata.txt"
        
              # üè∑ Determine filename
              if [ "$BUILD_TYPE" = "release" ]; then
                ZIP_NAME="${PROJECT}-${PLATFORM}-${VERSION}.zip"
              else
                if [ -n "$PR_NUMBER" ]; then
                  ZIP_NAME="${PROJECT}-${PLATFORM}-pr${PR_NUMBER}.zip"
                else
                  ZIP_NAME="${PROJECT}-${PLATFORM}-manual.zip"
                fi
              fi
        
              # üì¶ Zip and upload
              echo "üì¶ Zipping $ARTIFACT_PATH to $ZIP_NAME"
              zip -r "$ZIP_NAME" "$ARTIFACT_PATH"
        
              echo "üì§ Uploading $ZIP_NAME to release ID $RELEASE_ID"
              curl -s -X POST \
                -H "Authorization: Bearer ${{ github.token }}" \
                -H "Content-Type: application/zip" \
                --data-binary @"$ZIP_NAME" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$ZIP_NAME"
            else
              echo "‚ö†Ô∏è Skipping: $ARTIFACT_PATH not found"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ github.token }}