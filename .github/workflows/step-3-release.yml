name: 📦 Step 3 - Release

on:
  workflow_call:
    inputs:
      buildType:
        description: "Should be 'release' to trigger publishing"
        type: string
        required: true
      version:
        description: "The version/tag name (e.g., v1.2.3)"
        type: string
        required: true
      projectName:
        description: "Project name used in the artifact"
        type: string
        required: true
      targetPlatforms:
        description: "JSON array of platforms to expect artifacts for"
        type: string
        required: true
    outputs:
      releaseErrorMessage:
        description: "Error message if release failed"
        value: ${{ jobs.publish.outputs.releaseErrorMessage }}

jobs:
  publish:
    if: ${{ inputs.buildType == 'release' }}
    name: 📤 Publish GitHub Release
    runs-on: ubuntu-latest
    outputs:
      releaseErrorMessage: ${{ steps.error-handler.outputs.releaseErrorMessage }}
   
    steps:
      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: 📝 Check if Release Already Exists
        id: check_release
        run: |
          VERSION="${{ inputs.version }}"
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION"

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "Accept: application/vnd.github+json" \
            "$API_URL")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ Release exists."
            RELEASE_ID=$(jq -r '.id' response.json)
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "release_id=$RELEASE_ID" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Release does not exist."
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: ❌ Force Failure (for test)
        run: exit 1
  
      - name: 📝 Create GitHub Release
        if: steps.check_release.outputs.exists != 'true'
        id: create_release
        run: |
          VERSION="${{ inputs.version }}"
          IS_PRERELEASE=$(echo "$VERSION" | grep -q '-' && echo true || echo false)

          PAYLOAD=$(jq -n \
            --arg tag_name "$VERSION" \
            --arg name "Release $VERSION" \
            --argjson prerelease "$IS_PRERELEASE" \
            '{ tag_name: $tag_name, name: $name, draft: false, prerelease: $prerelease }')

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "Accept: application/vnd.github+json" \
            -d "$PAYLOAD" \
            "https://api.github.com/repos/${{ github.repository }}/releases")

          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
          echo "release_id=$RELEASE_ID" >> "$GITHUB_OUTPUT"
          echo "✅ Created release with ID: $RELEASE_ID"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: 🧮 Upload Per-Platform Artifacts
        run: |
          VERSION="${{ inputs.version }}"
          PROJECT="${{ inputs.projectName }}"
          PLATFORMS=$(echo '${{ inputs.targetPlatforms }}' | jq -r '.[]')

          # Use release ID from check or create step
          RELEASE_ID="${{ steps.check_release.outputs.release_id || steps.create_release.outputs.release_id }}"

          for PLATFORM in $PLATFORMS; do
            ARTIFACT_PATH="release-artifacts/${PROJECT}-${VERSION}-${PLATFORM}"
            ZIP_NAME="${PROJECT}-${VERSION}-${PLATFORM}.zip"

            if [ -d "$ARTIFACT_PATH" ]; then
              echo "📦 Zipping $ARTIFACT_PATH"
              zip -r "$ZIP_NAME" "$ARTIFACT_PATH"

              echo "📤 Uploading $ZIP_NAME to release ID $RELEASE_ID"
              curl -s -X POST \
                -H "Authorization: Bearer ${{ github.token }}" \
                -H "Content-Type: application/zip" \
                --data-binary @"$ZIP_NAME" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$ZIP_NAME"
            else
              echo "⚠️ Skipping: $ARTIFACT_PATH not found"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: 🧮 Upload Combined Artifact
        run: |
          VERSION="${{ inputs.version }}"
          PROJECT="${{ inputs.projectName }}"
          COMBINED_PATH="release-artifacts/${PROJECT}-${VERSION}"
          COMBINED_ZIP="${PROJECT}-${VERSION}-all-platforms.zip"

          # Use release ID from check or create step
          RELEASE_ID="${{ steps.check_release.outputs.release_id || steps.create_release.outputs.release_id }}"

          if [ -d "$COMBINED_PATH" ]; then
            echo "📦 Zipping combined artifact: $COMBINED_PATH → $COMBINED_ZIP"
            zip -r "$COMBINED_ZIP" "$COMBINED_PATH"

            echo "📤 Uploading $COMBINED_ZIP to release ID $RELEASE_ID"
            curl -s -X POST \
              -H "Authorization: Bearer ${{ github.token }}" \
              -H "Content-Type: application/zip" \
              --data-binary @"$COMBINED_ZIP" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$COMBINED_ZIP"
          else
            echo "ℹ️ No combined build artifact found — skipping."
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: 🛠️ Capture Release Errors
        if: failure()
        id: error-handler
        run: |
          ERROR_MESSAGE="Unknown release failure"

          if ! ls release-artifacts/* >/dev/null 2>&1; then
            ERROR_MESSAGE="No artifacts found in 'release-artifacts/'"
          elif ! jq -e .id response.json >/dev/null 2>&1; then
            ERROR_MESSAGE="Failed to create or fetch GitHub Release"
          else
            ERROR_MESSAGE="One or more upload steps failed"
          fi

          echo "releaseErrorMessage=$ERROR_MESSAGE" >> $GITHUB_OUTPUT