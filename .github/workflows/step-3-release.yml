name: üì¶ Step 3 - Release

on:
  workflow_call:
    inputs:
      buildType:
        description: "Should be 'release' to trigger publishing"
        type: string
        required: true
      version:
        description: "The version/tag name (e.g., v1.2.3)"
        type: string
        required: true
      projectName:
        description: "Project name used in the artifact"
        type: string
        required: true
      targetPlatforms:
        description: "JSON array of platforms to expect artifacts for"
        type: string
        required: true

jobs:
  publish:
    if: ${{ inputs.buildType == 'release' }}
    name: üì§ Publish GitHub Release
    runs-on: ubuntu-latest

    steps:
      - name: üì• Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: üìù Check if Release Already Exists
        id: check_release
        run: |
          VERSION="${{ inputs.version }}"
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION"

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "$API_URL")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "‚úÖ Release exists."
            RELEASE_ID=$(jq -r '.id' response.json)
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "release_id=$RELEASE_ID" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Release does not exist."
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: üìù Create GitHub Release
        if: steps.check_release.outputs.exists != 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.version }}
          release_name: Release ${{ inputs.version }}
          draft: false
          prerelease: ${{ contains(inputs.version, '-') }}

      - name: üßÆ Upload Artifacts
        run: |
          VERSION="${{ inputs.version }}"
          PROJECT="${{ inputs.projectName }}"
          PLATFORMS=$(echo '${{ inputs.targetPlatforms }}' | jq -r '.[]')
          
          # Fallback to get release ID
          RELEASE_ID=$(gh release view "$VERSION" --json id -q .id)

          for PLATFORM in $PLATFORMS; do
            ARTIFACT_PATH="release-artifacts/${{ inputs.buildType }}-${PROJECT}-${PLATFORM}-${VERSION}"
            if [ -d "$ARTIFACT_PATH" ]; then
              zip -r "${PLATFORM}.zip" "$ARTIFACT_PATH"
              curl \
                -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/zip" \
                --data-binary @"${PLATFORM}.zip" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}/assets?name=${PROJECT}-${PLATFORM}-${VERSION}.zip"
            else
              echo "‚ö†Ô∏è Skipping: $ARTIFACT_PATH not found"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
