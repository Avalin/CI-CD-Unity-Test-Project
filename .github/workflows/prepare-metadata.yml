name: ⏳ Prepare Metadata

on:
  workflow_call:
    inputs:
      projectName:
        type: string
        required: true
      unityVersion:
        type: string
        required: true
      buildVersion:
        type: string
        required: false
      deployTargets:
        type: string
        required: true
      buildTargets:
        type: string
        required: false
      buildType:
        type: string
        required: false
      skipTests:
        type: string
        required: false
      skipBuild:
        type: string
        required: false
        default: 'false'
      testsOnly:
        type: string
        required: false
      quietMode:
        type: string
        required: false
    outputs:
      projectName:
        value: ${{ jobs.prepare_metadata.outputs.projectName }}
      unityVersion:
        value: ${{ jobs.prepare_metadata.outputs.unityVersion }}
      buildVersion:
        value: ${{ jobs.resolve_build_version.outputs.buildVersion }}
      testsOnly:
        value: ${{ jobs.resolve_tests_status.outputs.testsOnly }}
      skipTests:
        value: ${{ jobs.resolve_tests_status.outputs.skipTests }}
      useGitLfs:
        value: ${{ jobs.prepare_metadata.outputs.useGitLfs }}
      editModePath:
        value: ${{ jobs.prepare_metadata.outputs.editModePath }}
      playModePath:
        value: ${{ jobs.prepare_metadata.outputs.playModePath }}
      timeoutMinutesTests:
        value: ${{ jobs.prepare_metadata.outputs.timeoutMinutesTests }}
      timeoutMinutesBuild:
        value: ${{ jobs.prepare_metadata.outputs.timeoutMinutesBuild }}
      quietMode:
        value: ${{ jobs.prepare_metadata.outputs.quietMode }}
      buildType:
        value: ${{ jobs.prepare_metadata.outputs.buildType }}
      retentionDays:
        value: ${{ jobs.prepare_metadata.outputs.retentionDays }}
      buildTargets:
        value: ${{ jobs.prepare_metadata.outputs.buildTargets }}
      validDeployTargets:
        value: ${{ jobs.prepare_metadata.outputs.deployTargets || '[]' }}
      requiresCombined:
        value: ${{ jobs.prepare_metadata.outputs.requiresCombined || false }}
      skipPerBuildTarget:
        value: ${{ jobs.prepare_metadata.outputs.skipPerBuildTarget || false }}

jobs:
  prepare_metadata:
    name: ⚖️ Prepare Metadata
    runs-on: ubuntu-latest
    outputs:
      projectName: ${{ steps.metadata.outputs.projectName }}
      unityVersion: ${{ steps.metadata.outputs.unityVersion }}
      timeoutMinutesTests: ${{ steps.metadata.outputs.timeoutMinutesTests }}
      timeoutMinutesBuild: ${{ steps.metadata.outputs.timeoutMinutesBuild }}
      retentionDays: ${{ steps.metadata.outputs.retentionDays }}
      buildType: ${{ steps.metadata.outputs.buildType }}
      buildTargets: ${{ steps.metadata.outputs.buildTargets }}
      deployTargets: ${{ steps.metadata.outputs.deployTargets }}
      requiresCombined: ${{ steps.metadata.outputs.requiresCombinedArtifact }}
      skipPerBuildTarget: ${{ steps.metadata.outputs.skipPerBuildTargetArtifact }}
      useGitLfs: ${{ steps.metadata.outputs.useGitLfs }}
      editModePath: ${{ steps.metadata.outputs.editModePath }}
      playModePath: ${{ steps.metadata.outputs.playModePath }}
      quietMode: ${{ steps.metadata.outputs.quietMode }}
    steps:
      - name: 📁 Checkout .github only
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/*
          sparse-checkout-cone-mode: false
          fetch-depth: 1

      - name: ⏳ Prepare Metadata
        id: metadata
        uses: avalin/unity-ci-templates/.github/actions/prepare-metadata@main
        with:
          artifactSource: build
          projectNameInput: ${{ inputs.projectName }}
          projectNameRepoVar: ${{ vars.PROJECT_NAME }}
          unityVersionInput: ${{ inputs.unityVersion }}
          unityVersionRepoVar: ${{ vars.UNITY_VERSION }}
          buildTypeInput: ${{ inputs.buildType }}
          buildTargetsInput: ${{ inputs.buildTargets }}
          buildTargetsRepoVar: ${{ vars.BUILD_TARGETS }}
          deployTargetsInput: ${{ inputs.deployTargets }}
          deployTargetsRepoVar: ${{ vars.DEPLOY_TARGETS }}
          retentionDaysReleaseRepoVar: ${{ vars.RETENTION_DAYS_RELEASE }}
          retentionDaysRcRepoVar: ${{ vars.RETENTION_DAYS_RC }}
          retentionDaysPreviewRepoVar: ${{ vars.RETENTION_DAYS_PREVIEW }}
          timeoutTestsRepoVar: ${{ vars.TIMEOUT_MINUTES_TESTS }}
          timeoutBuildRepoVar: ${{ vars.TIMEOUT_MINUTES_BUILD }}
          useGitLfsRepoVar: ${{ vars.USE_GIT_LFS }}
          editModePathRepoVar: ${{ vars.UNITY_TESTS_EDITMODE_PATH }}
          playModePathRepoVar: ${{ vars.UNITY_TESTS_PLAYMODE_PATH }}
          quietModeRepoVar: ${{ vars.UNITY_TESTS_QUIET_MODE }}

  resolve_tests_status:
    name: Resolve Tests Status
    runs-on: ubuntu-latest
    outputs:
      testsOnly: ${{ steps.tests_only.outputs.testsOnly }}
      skipTests: ${{ steps.skip_tests.outputs.skipTests }}
    steps:
      - name: 📁 Checkout .github only
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github/*
          sparse-checkout-cone-mode: false
          fetch-depth: 1

      - name: 🔍 Resolve Tests-Only Mode
        id: tests_only
        uses: avalin/unity-ci-templates/.github/actions/detect-tests-only@main
        with:
          testsOnlyInput: ${{ inputs.testsOnly }}

      - name: 🔍 Resolve Skip Tests Flag
        id: skip_tests
        uses: avalin/unity-ci-templates/.github/actions/detect-skip-tests@main
        with:
          skipTestsInput: ${{ inputs.skipTests }}
          skipTestsRepoVar: ${{ vars.EXCLUDE_UNITY_TESTS }}
          testsOnly: ${{ steps.tests_only.outputs.testsOnly }}

  resolve_build_version:
    name: Create build versioning
    needs:
      - prepare_metadata
      - resolve_tests_status
    if: needs.resolve_tests_status.outputs.testsOnly == 'false' && inputs.skipBuild == 'false'
    uses: ./.github/workflows/build-version-resolver.yml
    with:
      buildType: ${{ needs.prepare_metadata.outputs.buildType }}
      buildVersion: ${{ inputs.buildVersion }}

  check_release_blocker:
    name: Check for Existing Release Blocker
    needs: 
      - resolve_build_version
      - prepare_metadata
    runs-on: ubuntu-latest
    outputs:
      release_already_exists: ${{ steps.set.outputs.should_continue }}
    steps:
      - id: set
        run: |
          if [[ "${{ needs.prepare_metadata.outputs.buildType }}" == "preview" ]]; then
            echo "✅ Preview builds ignore releases - continuing pipeline."
            echo "release_already_exists=false" >> "$GITHUB_OUTPUT"
          elif [[ "${{ needs.resolve_build_version.outputs.releaseExists }}" == "true" ]]; then
            echo "❌ A release already exists for version '${{ needs.resolve_build_version.outputs.releaseExists }}'. Stopping pipeline early."
            echo "release_already_exists=true" >> "$GITHUB_OUTPUT"
            exit 1
          else
            echo "✅ No existing release detected - continuing pipeline."
            echo "release_already_exists=false" >> "$GITHUB_OUTPUT"
          fi

  summarize_metadata:
    name: 📄 Summarize Metadata
    needs:
      - prepare_metadata
      - resolve_tests_status
      - resolve_build_version
      - check_release_blocker
    if: always()
    uses: ./.github/workflows/summarize-metadata.yml
    with:
      unityVersion: ${{ needs.prepare_metadata.outputs.unityVersion }}
      projectName: ${{ needs.prepare_metadata.outputs.projectName }}
      buildVersion: ${{ needs.resolve_build_version.outputs.buildVersion }}
      buildType: ${{ needs.prepare_metadata.outputs.buildType }}
      skipTests: ${{ needs.resolve_tests_status.outputs.skipTests }}
      testsOnly: ${{ needs.resolve_tests_status.outputs.testsOnly }}
      retentionDays: ${{ needs.prepare_metadata.outputs.retentionDays }}
      timeoutMinutesTests: ${{ needs.prepare_metadata.outputs.timeoutMinutesTests }}
      timeoutMinutesBuild: ${{ needs.prepare_metadata.outputs.timeoutMinutesBuild }}
      buildTargets: ${{ needs.prepare_metadata.outputs.buildTargets }}
      validDeployTargets: ${{ needs.prepare_metadata.outputs.deployTargets || '[]' }}
      requiresCombined: ${{ needs.prepare_metadata.outputs.requiresCombined || false }}
      skipPerBuildTarget: ${{ needs.prepare_metadata.outputs.skipPerBuildTarget || false }}
      releaseAlreadyExists: ${{ needs.check_release_blocker.outputs.release_already_exists }}