name: ⏳ Prepare Metadata

on:
  workflow_call:
    inputs:
      deployTargets:
        type: string
        required: true
      buildType:
        type: string
        required: false
      skipTests:
        type: string
        required: false
      version:
        type: string
        required: false
    outputs:
      buildType:
        value: ${{ jobs.metadata.outputs.buildType }}
      triggeredBy:
        value: ${{ jobs.metadata.outputs.triggeredBy }}
      skipTests:
        value: ${{ jobs.metadata.outputs.skipTests }}
      version:
        value: ${{ jobs.metadata.outputs.version }}
      validDeployTargets:
        value: ${{ jobs.metadata.outputs.validDeployTargets }}
      requiresCombined:
        value: ${{ jobs.metadata.outputs.requiresCombined }}
      skipPerPlatform:
        value: ${{ jobs.metadata.outputs.skipPerPlatform }}

jobs:
  detect_skip_tests:
    name: Detect Skip Tests
    runs-on: ubuntu-latest
    outputs:
      skipTests: ${{ steps.detect.outputs.skipTests }}
    steps:
      - id: detect
        run: |
          # Default to false
          SKIP=false

          # Check vars.EXCLUDE_UNITY_TESTS
          if [[ "${{ vars.EXCLUDE_UNITY_TESTS }}" == "true" ]]; then
            SKIP=true
          fi

          # Check commit message if this is a push event
          if [[ "$GITHUB_EVENT_NAME" == "push" && -f "$GITHUB_EVENT_PATH" ]]; then
            COMMIT_MSG=$(jq -r .head_commit.message < "$GITHUB_EVENT_PATH")
            if [[ "$COMMIT_MSG" == *"[skip tests]"* ]]; then
              SKIP=true
            fi
          fi

          echo "skipTests=$SKIP" >> "$GITHUB_OUTPUT"

  resolve_trigger:
    name: Resolve Github Event Trigger
    runs-on: ubuntu-latest
    outputs:
      triggeredBy: ${{ steps.event.outputs.triggeredBy }}
    steps:
      - id: event
        run: echo "triggeredBy=$GITHUB_EVENT_NAME" >> "$GITHUB_OUTPUT"

  resolve_build_type:
    name: Resolve Build Type (Preview, RC, Release)
    runs-on: ubuntu-latest
    outputs:
      buildType: ${{ steps.set.outputs.buildType }}
    steps:
      - id: set
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            BUILD_TYPE="release"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            BUILD_TYPE="${{ inputs.buildType || 'preview' }}"
          else
            BUILD_TYPE="${{ inputs.buildType || 'preview' }}"
          fi
          echo "buildType=$BUILD_TYPE" >> $GITHUB_OUTPUT

  version:
    name: Create versioning
    needs: resolve_build_type
    uses: avalin/unity-ci-templates/.github/workflows/build-version-generator.yml@main
    with:
      buildType: ${{ needs.resolve_build_type.outputs.buildType }}
      version: ${{ inputs.version }}

  validate_deploy_targets:
    name: Validate Deploy Targets
    uses: ./.github/workflows/validate-deploy-targets.yml
    with:
      deployTargets: ${{ inputs.deployTargets }}

  analyze_artifact_strategy:
    name: Analyze Artifact Strategy
    needs: validate_deploy_targets
    if: needs.validate_deploy_targets.outputs.skipAnalysis != 'true'
    uses: ./.github/workflows/analyze-artifact-strategy.yml
    with:
      artifactSource: build
      deployTargets: ${{ needs.validate_deploy_targets.outputs.validTargets }}

  metadata:
    name: Summarize Metadata
    runs-on: ubuntu-latest
    if: always()
    needs:
      - detect_skip_tests
      - resolve_trigger
      - resolve_build_type
      - version
      - validate_deploy_targets
      - analyze_artifact_strategy
    outputs:
      version: ${{ needs.version.outputs.version }}
      buildType: ${{ needs.resolve_build_type.outputs.buildType }}
      skipTests: ${{ needs.detect_skip_tests.outputs.skipTests }}
      triggeredBy: ${{ needs.resolve_trigger.outputs.triggeredBy }}
      validDeployTargets: ${{ needs.validate_deploy_targets.outputs.validTargets }}
      requiresCombined: ${{ needs.analyze_artifact_strategy.outputs.requiresCombined || false }}
      skipPerPlatform: ${{ needs.analyze_artifact_strategy.outputs.skipPerPlatform || true }}
    steps:
      - name: Summarize
        run: |
          DEPLOY_TARGETS=$(echo '${{ needs.validate_deploy_targets.outputs.validTargets }}' | jq -c '.')

          echo "## ⏳ Build Metadata Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Key                          | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------------------------------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version                      | ${{ needs.version.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Type                   | ${{ needs.resolve_build_type.outputs.buildType }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Skip Tests                   | ${{ needs.detect_skip_tests.outputs.skipTests }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Triggered by                 | ${{ needs.resolve_trigger.outputs.triggeredBy }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy Targets               | \`$DEPLOY_TARGETS\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Requires Combined Artifacts  | ${{ needs.analyze_artifact_strategy.outputs.requiresCombined }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Skip Per-Platform Artifacts  | ${{ needs.analyze_artifact_strategy.outputs.skipPerPlatform }} |" >> $GITHUB_STEP_SUMMARY