name: ⏳ Prepare Metadata

on:
  workflow_call:
    inputs:
      deployTargets:
        type: string
        required: true
      targetPlatforms:
        type: string
        required: false
      buildType:
        type: string
        required: false
      skipTests:
        type: string
        required: false
      skipBuild:
        type: string
        required: false
        default: 'false'
      testsOnly:
        type: string
        required: false
      version:
        type: string
        required: false
    outputs:
      unityVersion:
        value: ${{ jobs.prepare_test_data.outputs.unityVersion }}
      useGitLfs:
        value: ${{ jobs.prepare_test_data.outputs.useGitLfs }}
      editModePath:
        value: ${{ jobs.prepare_test_data.outputs.editModePath }}
      playModePath:
        value: ${{ jobs.prepare_test_data.outputs.playModePath }}
      timeoutMinutesTests:
        value: ${{ jobs.prepare_timeouts.outputs.timeoutMinutesTests }}
      timeoutMinutesBuild:
        value: ${{ jobs.prepare_timeouts.outputs.timeoutMinutesBuild }}
      quietMode:
        value: ${{ jobs.prepare_test_data.outputs.quietMode }}
      buildType:
        value: ${{ jobs.resolve_build_type.outputs.buildType }}
      testsOnly:
        value: ${{ jobs.detect_tests_only.outputs.testsOnly }}
      skipTests:
        value: ${{ jobs.detect_skip_tests.outputs.skipTests }}
      version:
        value: ${{ jobs.version.outputs.version }}
      retentionDays:
        value: ${{ jobs.resolve_retention_days.outputs.retentionDays }}
      targetPlatforms:
        value: ${{ jobs.resolve_target_platforms.outputs.validatedTargetPlatforms || '[]' }}
      validDeployTargets:
        value: ${{ jobs.validate_deploy_targets.outputs.validatedTargets || '[]' }}
      requiresCombined:
        value: ${{ jobs.analyze_artifact_strategy.outputs.requiresCombined || false }}
      skipPerPlatform:
        value: ${{ jobs.analyze_artifact_strategy.outputs.skipPerPlatform || false }}

jobs:
  detect_tests_only:
    name: Detect Tests-Only Run
    runs-on: ubuntu-latest
    outputs:
      testsOnly: ${{ steps.detect.outputs.testsOnly }}
    steps:
      - id: detect
        run: |
          IS_TESTS_ONLY="false"

          # Manual flag (from dispatch input)
          if [[ "${{ inputs.testsOnly }}" == "true" ]]; then
            IS_TESTS_ONLY="true"
          fi

          # Auto-detect based on event
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TYPE="${{ github.event.action }}"
            if [[ "$TYPE" == "ready_for_review" || "$TYPE" == "synchronize" || "$TYPE" == "reopened" ]]; then
              IS_TESTS_ONLY="true"
            fi
          fi

          echo "testsOnly=$IS_TESTS_ONLY" >> "$GITHUB_OUTPUT"

  detect_skip_tests:
    name: Detect Skip Tests
    needs: detect_tests_only
    runs-on: ubuntu-latest
    env:
      TESTS_ONLY: ${{ needs.detect_tests_only.outputs.testsOnly }}
    outputs:
      skipTests: ${{ steps.detect.outputs.skipTests }}
    steps:
      - id: detect
        run: |
          INPUT_SKIP_TESTS="${{ inputs.skipTests || 'default' }}"
          SKIP_TESTS=false

          # Prioritize explicit 'true' or 'false' input
          if [[ "$INPUT_SKIP_TESTS" == "true" || "$INPUT_SKIP_TESTS" == "false" ]]; then
            SKIP_TESTS="$INPUT_SKIP_TESTS"
            echo "✅ Explicit input provided - skipping tests: $SKIP_TESTS"
          else
            # Auto-detect logic when input is 'default' or anything else
            if [ "$TESTS_ONLY" = "true" ]; then
              SKIP_TESTS="false"
              echo "ℹ️ Tests-only mode detected, forcing skipTests=false"
            elif [[ "${{ vars.EXCLUDE_UNITY_TESTS }}" == "true" ]]; then
              SKIP_TESTS=true
              echo "ℹ️ vars.EXCLUDE_UNITY_TESTS is true, setting skipTests=true"
            fi

            # Check commit message if this is a push event
            if [[ "$GITHUB_EVENT_NAME" == "push" && -f "$GITHUB_EVENT_PATH" ]]; then
              COMMIT_MSG=$(jq -r .head_commit.message < "$GITHUB_EVENT_PATH")
              if [[ "$COMMIT_MSG" == *"[skip tests]"* ]]; then
                SKIP_TESTS=true
                echo "ℹ️ Commit message contains [skip tests], setting skipTests=true"
              fi
            fi
          fi

          echo "skipTests=$SKIP_TESTS" >> "$GITHUB_OUTPUT"

  prepare_test_data:
    name: Prepare Test Data
    runs-on: ubuntu-latest
    needs:
      - detect_skip_tests
    if: ${{ needs.detect_skip_tests.outputs.skipTests != 'true' }}
    outputs:
      unityVersion: ${{ steps.set.outputs.unityVersion }}
      useGitLfs: ${{ steps.set.outputs.useGitLfs }}
      editModePath: ${{ steps.set.outputs.editModePath }}
      playModePath: ${{ steps.set.outputs.playModePath }}
      quietMode: ${{ steps.set.outputs.quietMode }}
    env:
      UNITY_VERSION_OVERRIDE: ${{ vars.UNITY_VERSION }}
      USE_GIT_LFS_OVERRIDE: ${{ vars.USE_GIT_LFS }}
      EDIT_MODE_PATH_OVERRIDE: ${{ vars.UNITY_TESTS_EDITMODE_PATH }}
      PLAY_MODE_PATH_OVERRIDE: ${{ vars.UNITY_TESTS_PLAYMODE_PATH }}
      QUIET_MODE_OVERRIDE: ${{ vars.UNITY_TESTS_QUIET_MODE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Resolve Test Config Action
        uses: avalin/unity-ci-templates/.github/actions/resolve-test-config@v1
        with:
          defaultsFileOverride: "./.github/config/defaults.json"
          unityVersionOverride: ${{ vars.UNITY_VERSION }}
          useGitLfsOverride: ${{ vars.USE_GIT_LFS }}
          editModePathOverride: ${{ vars.UNITY_TESTS_EDITMODE_PATH }}
          playModePathOverride: ${{ vars.UNITY_TESTS_PLAYMODE_PATH }}
          quietModeOverride: ${{ vars.UNITY_TESTS_QUIET_MODE }}

  prepare_timeouts:
    name: Prepare Timeouts
    runs-on: ubuntu-latest
    outputs:
      timeoutMinutesTests: ${{ steps.set.outputs.timeoutMinutesTests }}
      timeoutMinutesBuild: ${{ steps.set.outputs.timeoutMinutesBuild }}
    env:
      TIMEOUT_TESTS_OVERRIDE: ${{ vars.TIMEOUT_TESTS_IN_MINUTES }}
      TIMEOUT_BUILD_OVERRIDE: ${{ vars.TIMEOUT_BUILD_IN_MINUTES }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Resolve Timeouts Action
        id: set      
        uses: avalin/unity-ci-templates/.github/actions/resolve-timeouts@v1
        with:
          defaultsFileOverride: "./.github/config/defaults.json"
          timeoutTestsOverride: ${{ vars.TIMEOUT_TESTS_IN_MINUTES }}
          timeoutBuildOverride: ${{ vars.TIMEOUT_BUILD_IN_MINUTES }}

  resolve_build_type:
    name: Resolve Build Type (Preview, RC, Release)
    needs: detect_tests_only
    runs-on: ubuntu-latest
    env:
      TESTS_ONLY: ${{ needs.detect_tests_only.outputs.testsOnly }}
    outputs:
      buildType: ${{ steps.set.outputs.buildType }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Resolve Build Type Action
        id: set
        uses: avalin/unity-ci-templates/.github/actions/resolve-build-type@v1
        with:
          testsOnlyOverride: ${{ needs.detect_tests_only.outputs.testsOnly }}
          buildTypeOverride: ${{ inputs.buildType }}

  version:
    name: Create versioning
    needs:
      - resolve_build_type
      - detect_tests_only
    if: needs.detect_tests_only.outputs.testsOnly == 'false' && inputs.skipBuild == 'false'
    uses: ./.github/workflows/version-resolver.yml
    with:
      buildType: ${{ needs.resolve_build_type.outputs.buildType }}
      version: ${{ inputs.version }}

  check_release_blocker:
    name: Check for Existing Release Blocker
    needs: 
      - version
      - resolve_build_type
    runs-on: ubuntu-latest
    outputs:
      release_already_existed: ${{ steps.set.outputs.should_continue }}
    steps:
      - id: set
        run: |
          if [[ "${{ needs.resolve_build_type.outputs.buildType }}" == "preview" ]]; then
            echo "✅ Preview builds ignore releases - continuing pipeline."
            echo "release_already_existed=false" >> "$GITHUB_OUTPUT"
          elif [[ "${{ needs.version.outputs.release_existed }}" == "true" ]]; then
            echo "❌ A release already exists for version '${{ needs.version.outputs.version }}'. Stopping pipeline early."
            echo "release_already_existed=true" >> "$GITHUB_OUTPUT"
            exit 1
          else
            echo "✅ No existing release detected - continuing pipeline."
            echo "release_already_existed=false" >> "$GITHUB_OUTPUT"
          fi

  resolve_target_platforms:
    needs:
      - detect_tests_only
      - resolve_build_type
    if: ${{ needs.detect_tests_only.outputs.testsOnly == 'false' && inputs.skipBuild == 'false' }}
    uses: ./.github/workflows/resolve-target-platforms.yml
    with:
      targetPlatforms: ${{ inputs.targetPlatforms || vars.TARGET_PLATFORMS || '[]' }}
      buildType: ${{ needs.resolve_build_type.outputs.buildType }}

  resolve_retention_days:
    name: Resolve Retention Days
    needs:
      - detect_tests_only
      - resolve_build_type
    if: ${{ needs.detect_tests_only.outputs.testsOnly == 'false' && inputs.skipBuild == 'false' }}
    runs-on: ubuntu-latest
    outputs:
      retentionDays: ${{ steps.set.outputs.retentionDays }}
    env:
      RETENTION_DAYS_RELEASE_OVERRIDE: ${{ vars.RETENTION_DAYS_RELEASE }}
      RETENTION_DAYS_RC_OVERRIDE: ${{ vars.RETENTION_DAYS_RC }}
      RETENTION_DAYS_PREVIEW_OVERRIDE: ${{ vars.RETENTION_DAYS_PREVIEW }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Resolve Retention Days Action
        id: set
        uses: avalin/unity-ci-templates/.github/actions/resolve-retention-days@v1
        with:
          defaultsFileOverride: "./.github/config/defaults.json"
          buildType: ${{ needs.resolve_build_type.outputs.buildType }}

  validate_deploy_targets:
    name: Validate Deploy Targets
    needs: 
      - check_release_blocker
      - resolve_build_type
      - resolve_target_platforms
      - detect_tests_only
    if: ${{ needs.detect_tests_only.outputs.testsOnly == 'false' }}
    uses: ./.github/workflows/validate-deploy-targets.yml
    with:
      buildType: ${{ needs.resolve_build_type.outputs.buildType }}
      targetPlatforms: ${{ needs.resolve_target_platforms.outputs.validatedTargetPlatforms }}
      deployTargets: ${{ inputs.deployTargets || vars.DEPLOY_TARGETS || '[]'}}

  analyze_artifact_strategy:
    name: Analyze Artifact Strategy
    needs: 
      - check_release_blocker
      - validate_deploy_targets
      - version
    if: ${{ needs.validate_deploy_targets.outputs.skipAnalysis != 'true' }}
    uses: ./.github/workflows/analyze-artifact-strategy.yml
    with:
      artifactSource: build
      deployTargets: ${{ needs.validate_deploy_targets.outputs.validatedTargets }}

  summarize_metadata:
    name: 📄 Summarize Metadata
    needs:
      - detect_skip_tests
      - detect_tests_only
      - resolve_build_type
      - resolve_retention_days
      - prepare_timeouts
      - resolve_target_platforms
      - version
      - check_release_blocker
      - validate_deploy_targets
      - analyze_artifact_strategy
    if: always()
    uses: ./.github/workflows/summarize-metadata.yml
    with:
      version: ${{ needs.version.outputs.version }}
      buildType: ${{ needs.resolve_build_type.outputs.buildType }}
      skipTests: ${{ needs.detect_skip_tests.outputs.skipTests }}
      testsOnly: ${{ needs.detect_tests_only.outputs.testsOnly }}
      retentionDays: ${{ needs.resolve_retention_days.outputs.retentionDays }}
      timeoutMinutesTests: ${{ needs.prepare_timeouts.outputs.timeoutMinutesTests }}
      timeoutMinutesBuild: ${{ needs.prepare_timeouts.outputs.timeoutMinutesBuild }}
      targetPlatforms: ${{ needs.resolve_target_platforms.outputs.validatedTargetPlatforms || '[]' }}
      validDeployTargets: ${{ needs.validate_deploy_targets.outputs.validatedTargets || '[]' }}
      requiresCombined: ${{ needs.analyze_artifact_strategy.outputs.requiresCombined || false }}
      skipPerPlatform: ${{ needs.analyze_artifact_strategy.outputs.skipPerPlatform || false }}
      releaseAlreadyExists: ${{ needs.check_release_blocker.outputs.release_already_existed }}