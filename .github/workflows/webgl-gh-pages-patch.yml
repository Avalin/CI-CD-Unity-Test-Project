name: 🩹 WebGL Patch for GH Pages

on:
  workflow_call:
    inputs:
      deploy_dir:
        description: "Base deploy directory (e.g., deployment-artifacts/MyProject-v1.0.0)"
        required: true
        type: string
      artifact_name:
        description: "Name of the WebGL build artifact (e.g. MyProject-v1.0.0-WebGL)"
        required: true
        type: string
    outputs:
      wasCompressed:
        description: "Whether the WebGL build had compression"
        value: ${{ jobs.detect.outputs.wasCompressed }}

jobs:
  detect:
    name: 🔎 Detect WebGL Compression
    runs-on: ubuntu-latest
    outputs:
      wasCompressed: ${{ steps.check.outputs.wasCompressed }}
    steps:
      - name: 📥 Download WebGL Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.deploy_dir }}

      - name: 📁 Check WebGL Build Exists
        run: |
          if [ ! -d "${{ inputs.deploy_dir }}/WebGL" ]; then
            echo "❌ WebGL build not found. Can't deploy to GitHub Pages."
            exit 1
          fi

      - name: 🔍 Check for Compression
        id: check
        run: |
          cd "${{ inputs.deploy_dir }}/WebGL"

          has_br=0
          has_gz=0
          if find . -type f -name "*.br" | grep -q .; then has_br=1; fi
          if find . -type f -name "*.gz" | grep -q .; then has_gz=1; fi

          if [ "$has_br" -eq 1 ]; then
            echo "⚠️ WebGL build is compressed. Found .br files"
            echo "wasCompressed=true" >> $GITHUB_OUTPUT
          elif [ "$has_gz" -eq 1 ]; then
            echo "⚠️ WebGL build is compressed. Found .gz files"
            echo "wasCompressed=true" >> $GITHUB_OUTPUT
          else
            echo "✅ WebGL build is uncompressed"
            echo "wasCompressed=false" >> $GITHUB_OUTPUT
          fi

  patch:
    name: 🩹 Patch WebGL for GitHub Pages
    runs-on: ubuntu-latest
    needs: detect
    if: needs.detect.outputs.wasCompressed == 'true'
    steps:
      - name: 📥 Download WebGL Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.deploy_dir }}

      - name: 🛠️ Patch and Decompress
        run: |
          echo "🔧 Patching Unity WebGL files for GitHub Pages..."

          # Install brotli/gzip tools if needed
          sudo apt-get update && sudo apt-get install -y brotli gzip

          cd "${{ inputs.deploy_dir }}/WebGL"

          # 1) Decompress any .br → original
          find . -type f -name "*.br" | while read f; do
            out="${f%.br}"
            echo "Decompressing Brotli: $f → $out"
            brotli -d -f "$f" -o "$out"
            rm "$f"
          done

          # 2) Decompress any .gz → original
          find . -type f -name "*.gz" | while read f; do
            out="${f%.gz}"
            echo "Decompressing Gzip: $f → $out"
            gunzip -c "$f" > "$out"
            rm "$f"
          done

          # 3) Strip out .br/.gz references and disable compressionFormat in all .js, .json, and .html
          find . -type f \( -name "*.js" -o -name "*.json" -o -name "*.html" \) -print0 | xargs -0 sed -i \
            -e 's/\.br//g' \
            -e 's/\.gz//g' \
            -e 's/compressionFormat:"br"/compressionFormat:null/g' \
            -e 's/compressionFormat:"gzip"/compressionFormat:null/g' \
            -e 's/"compressionFormat":"br"/"compressionFormat":null/g' \
            -e 's/"compressionFormat":"gzip"/"compressionFormat":null/g'

          echo "✅ Patch complete: files are uncompressed and ready for GH Pages."
