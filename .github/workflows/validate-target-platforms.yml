name: 📚 Validate Target Platforms

on:
  workflow_call:
    inputs:
      targetPlatforms:
        required: true
        type: string
    outputs:
      validPlatforms:
        description: "List of valid platforms"
        value: ${{ jobs.validate.outputs.validPlatforms }}

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      validPlatforms: ${{ steps.validate.outputs.validPlatforms }}
    steps:
      - name: 📁 Checkout repo
        uses: actions/checkout@v4

      - name: 🔍 Validate Platforms
        id: validate
        run: |
          INPUT_JSON='${{ inputs.targetPlatforms }}'
          CONFIG_FILE=".github/config/target-platforms.json"
          FALLBACK_URL="https://raw.githubusercontent.com/avalin/unity-ci-templates/main/.github/config/target-platforms.json"

          echo "$INPUT_JSON" | jq empty || {
            echo "❌ Invalid JSON input."
            exit 1
          }

          if [ -f "$CONFIG_FILE" ]; then
            echo "✅ Using local config: $CONFIG_FILE"
          else
            echo "⚠️ Config not found. Downloading fallback..."
            mkdir -p "$(dirname "$CONFIG_FILE")"
            curl -sSL "$FALLBACK_URL" -o "$CONFIG_FILE"
          fi

          KNOWN=$(jq -r 'keys[]' "$CONFIG_FILE")
          INPUTS=$(echo "$INPUT_JSON" | jq -r '.[]')
          VALID=()
          INVALID=()

          for PLATFORM in $INPUTS; do
            if echo "$KNOWN" | grep -qx "$PLATFORM"; then
              VALID+=("$PLATFORM")
            else
              INVALID+=("$PLATFORM")
            fi
          done

          VALID_JSON=$(printf '%s\n' "${VALID[@]}" | jq -R . | jq -s .)
          echo "validPlatforms<<EOF" >> $GITHUB_OUTPUT
          echo "$VALID_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Save invalid list for summary step
          printf '%s\n' "${INVALID[@]}" > invalid.txt || true

      - name: 📋 Summary of Platform Validation
        if: always()
        run: |
          echo ""
          echo "📋 Platform Validation Summary"
          echo "──────────────────────────────────────"

          echo "✅ Valid Platforms:"
          echo '${{ steps.validate.outputs.validPlatforms }}' | jq -r '.[] | "   • \(.)"'

          if [ -s invalid.txt ]; then
            echo ""
            echo "⚠️ Invalid Platforms (ignored):"
            while read -r platform; do
              echo "   • $platform"
            done < invalid.txt
          fi