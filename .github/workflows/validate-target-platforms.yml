name: üßÆ Validate & Filter Platforms

on:
  workflow_call:
    inputs:
      targetPlatforms:
        description: "JSON array of platforms to validate and group by required OS"
        required: true
        type: string
    outputs:
      groupedPlatforms:
        description: "Map of OS runner label to list of platforms"
        value: ${{ jobs.filter_platforms.outputs.groupedPlatforms }}

jobs:
  filter_platforms:
    name: üßÆ Filter Platforms
    runs-on: ubuntu-latest
    outputs:
      groupedPlatforms: ${{ steps.group.outputs.groupedPlatforms }}

    steps:
      - name: üìÅ Checkout repo
        uses: actions/checkout@v4

      - name: üîç Validate Platforms and Load Config
        id: validate
        run: |
          INPUT_JSON='${{ inputs.targetPlatforms }}'
          CONFIG_FILE=".github/config/target-platforms.json"
          FALLBACK_URL="https://raw.githubusercontent.com/avalin/unity-ci-templates/main/.github/config/target-platforms.json"

          echo "üîç Validating input platforms: $INPUT_JSON"

          if [ -f "$CONFIG_FILE" ]; then
            echo "‚úÖ Using config: $CONFIG_FILE"
          else
            echo "‚ö†Ô∏è Config not found. Downloading fallback..."
            mkdir -p "$(dirname "$CONFIG_FILE")"
            curl -sSL "$FALLBACK_URL" -o "$CONFIG_FILE"
          fi

          echo "$INPUT_JSON" | jq empty || {
            echo "‚ùå Input is not valid JSON."
            exit 1
          }

          KNOWN=$(jq -r 'keys[]' "$CONFIG_FILE")
          INPUTS=$(echo "$INPUT_JSON" | jq -r '.[]')
          VALID=()
          INVALID=()

          for PLATFORM in $INPUTS; do
            if echo "$KNOWN" | grep -qx "$PLATFORM"; then
              VALID+=("$PLATFORM")
            else
              INVALID+=("$PLATFORM")
            fi
          done

          if [ "${#INVALID[@]}" -gt 0 ]; then
            echo "‚ö†Ô∏è Unrecognized platforms (ignored):"
            for p in "${INVALID[@]}"; do echo "  - $p"; done
          fi

          VALID_JSON=$(printf '%s\n' "${VALID[@]}" | jq -R . | jq -s .)
          echo "validPlatforms<<EOF" >> $GITHUB_OUTPUT
          echo "$VALID_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üß™ Group Valid Platforms by OS
        id: group
        run: |
          CONFIG_FILE=".github/config/target-platforms.json"
          PLATFORMS='${{ steps.validate.outputs.validPlatforms }}'

          echo "üì• Grouping platforms by OS..."

          jq -n \
            --argjson platforms "$PLATFORMS" \
            --slurpfile cfg "$CONFIG_FILE" '
              $platforms
              | map({ platform: ., os: ($cfg[0][.]?.os) })
              | group_by(.os)
              | map({ (.[0].os): map(.platform) })
              | add
            ' > grouped.json

          echo "üì¶ Grouped platforms:"
          cat grouped.json

          echo "groupedPlatforms<<EOF" >> $GITHUB_OUTPUT
          cat grouped.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT