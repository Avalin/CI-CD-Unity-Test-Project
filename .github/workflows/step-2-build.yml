name: üß© Step 2 - Build

on:
  workflow_call:
    inputs:
      projectName:
        description: "The name of the built project i.e. 'My_Project' (avoid spaces)"
        default: "My_Project"
        type: string
        required: false
      buildVersion:
        description: "Optional version string (e.g. v1.2.3 or v1.2.3-rc.1). Leave blank to auto-generate (e.g. PR-0001, manual-main)"
        required: true
        default: ""
        type: string
      buildTargets:
        description: "JSON array of build targets to build"
        type: string
        default: '["Android","WebGL","StandaloneLinux64","StandaloneWindows","StandaloneWindows64","StandaloneOSX","iOS"]'
        required: false
      timeoutMinutes:
        description: "Timeout for each build job in minutes"
        type: number
        default: 30
        required: false
      retentionDays:
        description: "How many days to keep the uploaded build artifacts (e.g. 7 for preview, 30 for release)"
        type: number
        default: 7
        required: false
      combineArtifacts:
        description: "Whether to combine all platform builds into a versioned folder"
        type: string
        default: "false"
        required: false
    secrets:
      UNITY_EMAIL: { required: true }
      UNITY_PASSWORD: { required: true }
      UNITY_LICENSE: { required: true }

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  filter_build_targets:
    uses: ./.github/workflows/validate-build-targets.yml
    with:
      buildTargets: ${{ inputs.buildTargets }}

  generate_matrix:
    name: üßÆ Generate Build Matrix
    runs-on: ubuntu-latest
    needs: [ filter_build_targets ]
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: üßÆ Create Build Matrix from Grouped Build Targets
        id: set_matrix
        run: |
          grouped='${{ needs.filter_build_targets.outputs.validBuildTargets }}'
          echo "üì¶ Grouped build targets: $grouped"
      
          matrix=$(echo "$grouped" | jq -c '
            to_entries
            | map(.value[] as $p | { os: .key, buildTarget: $p })
          ')
      
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$matrix" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build_targets:
    name: Build for ${{ matrix.buildTarget }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ inputs.timeoutMinutes }}
    needs: [ generate_matrix ]
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate_matrix.outputs.matrix) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Restore Unity Caches (Library + BuildCache)
        uses: actions/cache@v4
        with:
          path: |
            Library
            Library/BuildCache
            Library/Il2cppBuildCache
          key: Library-${{ matrix.buildTarget }}-${{ github.run_id }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.buildTarget }}-
            Library-

      - name: Check Free Disk Space (Android only)
        if: matrix.buildTarget == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1

      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.buildTarget }}

      - name: Save Unity Caches (after successful build)
        uses: actions/cache/save@v4
        if: success()
        with:
          path: |
            Library
            Library/BuildCache
            Library/Il2cppBuildCache
          key: Library-${{ matrix.buildTarget }}-${{ github.run_id }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}

      - name: Fix Permissions (Linux only)
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo chown -R $USER:$USER build/

      - name: Organize Build Output
        run: |
          VERSION="${{ inputs.buildVersion }}"
          PLATFORM="${{ matrix.buildTarget }}"
          DEST="${{ inputs.projectName }}-${VERSION}"
          SOURCE="build/${PLATFORM}"

          while [ -d "$SOURCE/$(basename "$SOURCE")" ]; do
            SOURCE="$SOURCE/$(basename "$SOURCE")"
          done

          mkdir -p "$DEST"
          mv "$SOURCE"/* "$DEST"/

          # ‚õî Remove Burst debug artifacts that shouldn't be shipped
          find "$DEST" -name '*BurstDebugInformation_DoNotShip*' -exec rm -rf {} +

      - name: Upload ${{ matrix.buildTarget }}-Platform Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.projectName }}-${{ inputs.buildVersion }}-${{ matrix.buildTarget }}
          path: ${{ inputs.projectName }}-${{ inputs.buildVersion }}/* # The '/*' ensures the content is zipped to the folder, not the entire folder
          retention-days: ${{ inputs.retentionDays }}

  combine_builds:
    if: ${{ inputs.combineArtifacts == 'true' }}
    needs: [ build_targets ]
    uses: ./.github/workflows/combine-builds.yml
    with:
      projectName: ${{ inputs.projectName }}
      buildVersion: ${{ inputs.buildVersion }}
      retentionDays: ${{ inputs.retentionDays }}

  summarize_builds:
    needs: [filter_build_targets, build_targets, combine_builds]
    if: always()
    uses: ./.github/workflows/summarize-builds.yml
    with:
      projectName: ${{ inputs.projectName }}
      buildVersion: ${{ inputs.buildVersion }}
      groupedBuildTargets: ${{ needs.filter_build_targets.outputs.validBuildTargets }}
      combineRequested: ${{ inputs.combineArtifacts }}
      combinedCreated: ${{ (needs.combine_builds.result == 'success' && needs.combine_builds.outputs.created) || 'false' }}

  fail_if_builds_failed:
    name: ‚õî Fail if Any Builds Failed
    needs: [summarize_builds]
    runs-on: ubuntu-latest
    if: ${{ needs.summarize_builds.outputs.didAnyBuildsFail == 'true' }}
    steps:
      - name: ‚õî Fail the Pipeline
        run: |
          echo "‚ùå One or more builds failed. Failing the pipeline."
          exit 1
