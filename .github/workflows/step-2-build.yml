name: ✨ Step 2 - Build

on:
  workflow_call:
    inputs:
      buildTargets:
        description: "Comma-separated build targets, or 'all' to build everything (StandaloneOSX,iOS,Android,WebGL,StandaloneWindows,StandaloneWindows64,StandaloneLinux64)"
        required: false
        default: "WebGL"
        type: string
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_LICENSE:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_on_macos:
    # Only run if buildTargets == 'all', or it contains 'StandaloneOSX' or 'iOS'
    if: ${{ inputs.buildTargets == 'all' || contains(inputs.buildTargets, 'StandaloneOSX') || contains(inputs.buildTargets, 'iOS') }}
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macOS-latest
        targetPlatform:
          - StandaloneOSX
          - iOS

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Restore Unity Library Cache
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-${{ matrix.targetPlatform }}-
        
      - name: Build Unity Project
        # Only build if target is 'all' or if it’s in the comma-separated buildTargets
        if: ${{ inputs.buildTargets == 'all' || contains(inputs.buildTargets, matrix.targetPlatform) }}
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload Build Artifact
        # Only upload if we actually built
        if: ${{ inputs.buildTargets == 'all' || contains(inputs.buildTargets, matrix.targetPlatform) }}
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}-${{ env.VERSION }}
          path: build/${{ matrix.targetPlatform }}
    
  build_on_ubuntu:
    # Only run if buildTargets == 'all', or it contains at least one of these
    if: ${{ inputs.buildTargets == 'all' ||
           contains(inputs.buildTargets, 'Android') ||
           contains(inputs.buildTargets, 'WebGL') ||
           contains(inputs.buildTargets, 'StandaloneWindows') ||
           contains(inputs.buildTargets, 'StandaloneWindows64') ||
           contains(inputs.buildTargets, 'StandaloneLinux64') }}
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: 
          - ubuntu-latest
        targetPlatform:
          - Android
          - WebGL
          - StandaloneWindows
          - StandaloneWindows64
          - StandaloneLinux64

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Restore Unity Library Cache
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-${{ matrix.targetPlatform }}-

      - name: Check Free Disk Space (Android only)
        if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
        
      - name: Build Unity Project
        # Only build if target is 'all' or if it’s in the comma-separated buildTargets
        if: ${{ inputs.buildTargets == 'all' || contains(inputs.buildTargets, matrix.targetPlatform) }}
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload Build Artifact
        # Only upload if we actually built
        if: ${{ inputs.buildTargets == 'all' || contains(inputs.buildTargets, matrix.targetPlatform) }}
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}-${{ env.VERSION }}
          path: build/${{ matrix.targetPlatform }}
  
  confirm_builds:
    name: Confirm Builds
    runs-on: ubuntu-latest
    needs: 
      - build_on_ubuntu
      - build_on_macos
    steps:
      - name: Confirm Builds
        run: echo "Creating builds successfully finished!"
