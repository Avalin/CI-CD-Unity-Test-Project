name: ✨ Step 2 - Build

on:
  workflow_call:
    inputs:
      targetPlatforms:
        type: string
        # The full superset of all possible platforms:
        default: '["Android", "WebGL", "StandaloneLinux64", "StandaloneWindows", "StandaloneWindows64", "StandaloneOSX", "iOS"]'
        required: false
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_LICENSE:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build_on_macos:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: macOS-latest
    # Only include the Mac-only platforms in this job:
    strategy:
      matrix:
        targetPlatform: [ "StandaloneOSX", "iOS" ]
    # For each platform in the matrix, only run if that platform is in the caller's input array.
    if: contains(fromJson(inputs.targetPlatforms), matrix.targetPlatform)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Restore Unity Library Cache
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-${{ matrix.targetPlatform }}-
        
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}-${{ env.VERSION }}
          path: build/${{ matrix.targetPlatform }}
    
  build_on_ubuntu:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    # List only the non-macOS platforms here:
    strategy:
      matrix:
        targetPlatform: [ "Android", "WebGL", "StandaloneLinux64", "StandaloneWindows", "StandaloneWindows64" ]
    # Again, only run if the matrix.platform is in the caller’s input array.
    if: contains(fromJson(inputs.targetPlatforms), matrix.targetPlatform)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Restore Unity Library Cache
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-${{ matrix.targetPlatform }}-
      
      - name: Check Free Disk Space (Android only)
        if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
        
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}-${{ env.VERSION }}
          path: build/${{ matrix.targetPlatform }}
  
  confirm_builds:
    name: Confirm Builds
    runs-on: ubuntu-latest
    needs: 
      - build_on_ubuntu
      - build_on_macos
    steps:
      - name: Confirm Builds
        run: echo "Creating builds successfully finished!"