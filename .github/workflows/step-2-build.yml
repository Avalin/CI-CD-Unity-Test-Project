name: ✨ Step 2 - Build

on:
  workflow_call:
    inputs:
      projectName:
        description: "The name of the built project i.e. 'My_Project' (avoid spaces)"
        default: "My_Project"
        type: string
        required: false
      buildType:
        description: "Build type, e.g. 'preview' or 'release'"
        type: string
        required: true
      targetPlatforms:
        description: "JSON array of platforms to build"
        type: string
        default: '["Android","WebGL","StandaloneLinux64","StandaloneWindows","StandaloneWindows64","StandaloneOSX","iOS"]'
        required: false
      timeoutMinutes:
        description: "Timeout for each build job in minutes"
        type: number
        default: 30
        required: false
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_LICENSE:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  filter_platforms:
    uses: ./.github/workflows/target-platforms-filter.yml
    with:
      targetPlatforms: ${{ inputs.targetPlatforms }}

  determine_version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Determine Version
        id: get_version
        shell: bash
        run: |
          if [ "${{ inputs.buildType }}" = "release" ]; then
            VERSION=$(echo "${GITHUB_REF}" | sed 's/refs\/tags\///')
            
             # 🔒 Validate tag format (v1.2.3 or v1.2.3-beta etc.)
             if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?$ ]]; then
               echo "❌ Invalid tag format: $VERSION"
               exit 1
             fi
          else
            VERSION=T$(date +%Y%m%d%H%M%S)_CH${GITHUB_SHA:0:7}
          fi
          
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Determined version: ${VERSION}"

  build_on_macos:
    name: Build for ${{ matrix.targetPlatform }}
    if: needs.filter_platforms.outputs.macPlatforms != '[]'
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ inputs.timeoutMinutes }}
    needs: [filter_platforms, determine_version]
    strategy:
      fail-fast: false
      matrix:
        os: 
          - macOS-latest
        targetPlatform: ${{ fromJson(needs.filter_platforms.outputs.macPlatforms) }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Restore Unity Library Cache
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-
            Library-
        
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.buildType }}-${{ inputs.projectName }}-${{ matrix.targetPlatform }}-${{ needs.determine_version.outputs.version }}
          path: build/${{ matrix.targetPlatform }}
          retention-days: ${{ inputs.buildType == 'release' && 30 || 7 }}          

  build_on_ubuntu:
    name: Build for ${{ matrix.targetPlatform }}
    if: needs.filter_platforms.outputs.ubuntuPlatforms != '[]'
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ inputs.timeoutMinutes }}
    needs: [filter_platforms, determine_version]
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
        targetPlatform: ${{ fromJson(needs.filter_platforms.outputs.ubuntuPlatforms) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Restore Unity Library Cache
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-
            Library-

      - name: Check Free Disk Space (Android only)
        if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
        
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.buildType }}-${{ inputs.projectName }}-${{ matrix.targetPlatform }}-${{ needs.determine_version.outputs.version }}
          path: build/${{ matrix.targetPlatform }}
          retention-days: ${{ inputs.buildType == 'release' && 30 || 7 }}

  confirm_builds:
    name: Confirm Builds
    runs-on: ubuntu-latest
    needs: 
      - build_on_ubuntu
      - build_on_macos
    steps:
      - name: Confirm Builds
        run: echo "Creating builds successfully finished!"