name: 🧩 Step 2 - Build

on:
  workflow_call:
    inputs:
      projectName:
        description: "The name of the built project i.e. 'My_Project' (avoid spaces)"
        default: "My_Project"
        type: string
        required: false
      buildType:
        description: "Build type, e.g. 'preview' or 'release'"
        type: string
        required: true
      targetPlatforms:
        description: "JSON array of platforms to build"
        type: string
        default: '["Android","WebGL","StandaloneLinux64","StandaloneWindows","StandaloneWindows64","StandaloneOSX","iOS"]'
        required: false
      timeoutMinutes:
        description: "Timeout for each build job in minutes"
        type: number
        default: 30
        required: false
      retentionDays:
        description: "How many days to keep the uploaded build artifacts (e.g. 7 for preview, 30 for release)"
        type: number
        default: 7
        required: false
    outputs:
      version:
        description: "The resolved version string used in the build"
        value: ${{ jobs.determine_version.outputs.version }}
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_LICENSE:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  filter_platforms:
    uses: avalin/unity-ci-templates/.github/workflows/target-platforms-filter.yml@main
    with:
      targetPlatforms: ${{ inputs.targetPlatforms }}

  determine_version:
    uses: avalin/unity-ci-templates/.github/workflows/build-version-generator.yml@main
    with:
      buildType: ${{ inputs.buildType }}

  generate_matrix:
    name: 🧮 Generate Build Matrix
    runs-on: ubuntu-latest
    needs: filter_platforms
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Combine macOS and Ubuntu platforms into matrix
        id: set-matrix
        run: |
          mac=${{ toJson(needs.filter_platforms.outputs.macPlatforms) }}
          ubuntu=${{ toJson(needs.filter_platforms.outputs.ubuntuPlatforms) }}

          echo "🍏 Mac targets → $mac"
          echo "🐧 Ubuntu targets → $ubuntu"

          matrix=$(jq -c -n \
            --argjson mac "$mac" \
            --argjson ubuntu "$ubuntu" '
            ($mac | map({ os: "macos-latest", targetPlatform: . })) +
            ($ubuntu | map({ os: "ubuntu-latest", targetPlatform: . }))')

          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build_platforms:
    name: Build for ${{ matrix.targetPlatform }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ inputs.timeoutMinutes }}
    needs: [generate_matrix, determine_version]
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate_matrix.outputs.matrix) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Restore Unity Caches (Library + BuildCache)
        uses: actions/cache@v4
        with:
          path: |
            Library
            Library/BuildCache
            Library/Il2cppBuildCache
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-
            Library-

      - name: Check Free Disk Space (Android only)
        if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1

      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Save Unity Caches (after successful build)
        uses: actions/cache/save@v4
        if: success()
        with:
          path: |
            Library
            Library/BuildCache
            Library/Il2cppBuildCache
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}

      - name: Fix Permissions (Linux only)
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo chown -R $USER:$USER build/

      - name: Organize Build Output
        run: |
          VERSION="${{ needs.determine_version.outputs.version }}"
          PLATFORM="${{ matrix.targetPlatform }}"
          DEST="${{ inputs.projectName }}-${VERSION}"
          SOURCE="build/${PLATFORM}"

          while [ -d "$SOURCE/$(basename "$SOURCE")" ]; do
            SOURCE="$SOURCE/$(basename "$SOURCE")"
          done

          mkdir -p "$DEST"
          mv "$SOURCE"/* "$DEST"/

          # ⛔ Remove Burst debug artifacts that shouldn't be shipped
          find "$DEST" -name '*BurstDebugInformation_DoNotShip*' -exec rm -rf {} +

      - name: Upload Platform Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.projectName }}-${{ needs.determine_version.outputs.version }}-${{ matrix.targetPlatform }}
          path: ${{ inputs.projectName }}-${{ needs.determine_version.outputs.version }}
          retention-days: ${{ inputs.retentionDays }}

  combine_builds:
    name: 📦 Combine All Platform Builds
    if: ${{ vars.COMBINE_ARTIFACTS == 'true' }}
    runs-on: ubuntu-latest
    needs: [build_platforms, determine_version]
    steps:
      - name: 📥 Download All Platform Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: 🧮 Check Number of Platforms
        id: platform_count
        run: |
          COUNT=$(find all-artifacts -mindepth 1 -maxdepth 1 -type d | wc -l)
          echo "Found $COUNT platform artifact(s)."
          echo "platform_count=$COUNT" >> $GITHUB_OUTPUT

      - name: 🗂 Combine Into Single Versioned Folder
        if: ${{ steps.platform_count.outputs.platform_count > 1 }}
        run: |
          VERSION="${{ needs.determine_version.outputs.version }}"
          PROJECT="${{ vars.PROJECT_NAME }}"
          COMBINED_DIR="${PROJECT}-${VERSION}"
          mkdir -p "$COMBINED_DIR"

          echo "Combining artifacts into: $COMBINED_DIR"

          for DIR in all-artifacts/*; do
            ARTIFACT_NAME=$(basename "$DIR")
            PLATFORM="${ARTIFACT_NAME##*-}"
            DEST="$COMBINED_DIR/$PLATFORM"

            echo "→ Merging platform: $PLATFORM into $DEST"
            mkdir -p "$DEST"
            cp -r "$DIR/"* "$DEST/" || echo "⚠️ Nothing to copy for $PLATFORM"
            rm -rf "$DEST/unity_license"
          done

      - name: 📦 Upload Combined Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.PROJECT_NAME }}-${{ needs.determine_version.outputs.version }}
          path: ${{ vars.PROJECT_NAME }}-${{ needs.determine_version.outputs.version }}
          retention-days: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && fromJson(vars.RETENTION_DAYS_RELEASE) || fromJson(vars.RETENTION_DAYS_PREVIEW) }}

  confirm_builds:
    name: 📄 Summarize Build Results
    if: always()
    runs-on: ubuntu-latest
    needs: [determine_version, build_platforms, combine_builds]
    steps:
      - name: 📥 Download All Platform Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: 📥 Download Combined Artifact
        if: ${{ vars.COMBINE_ARTIFACTS == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.PROJECT_NAME }}-${{ needs.determine_version.outputs.version }}
          path: combined-artifact

      - name: 📘 Write Build Summary
        run: |
          echo "### ✅ Unity Build Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY

          for dir in all-artifacts/*; do
            platform=$(basename "$dir")
            case "$platform" in
              *Android*) label="Android" ;;
              *WebGL*) label="WebGL" ;;
              *StandaloneWindows*) label="Windows" ;;
              *StandaloneLinux*) label="Linux" ;;
              *StandaloneOSX*) label="macOS" ;;
              *iOS*) label="iOS" ;;
              *) label="$platform" ;;
            esac

            if [ -d "$dir" ]; then
              echo "| $label | ✅ |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $label | ❌ |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ vars.COMBINE_ARTIFACTS }}" == "true" ]]; then
            echo "### 📦 Combined Artifact" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ -d "combined-artifact" ]; then
              echo "- ✅ Combined artifact successfully created and uploaded." >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ Combined artifact was expected but is missing!" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ Combined artifacts were not requested (COMBINE_ARTIFACTS is false)." >> $GITHUB_STEP_SUMMARY
          fi
