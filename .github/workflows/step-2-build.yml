name: âœ¨ Step 2 - Build

on:
  workflow_call:
    inputs:
      targetPlatforms:
        description: "JSON array of platforms to build"
        type: string
        default: '["Android","WebGL","StandaloneLinux64","StandaloneWindows","StandaloneWindows64","StandaloneOSX","iOS"]'
        required: false
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_LICENSE:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  filter_platforms:
    name: Filter Platforms
    runs-on: ubuntu-latest
    # We'll produce two outputs for subsequent jobs
    outputs:
      macPlatforms: ${{ steps.filter.outputs.macPlatforms }}
      ubuntuPlatforms: ${{ steps.filter.outputs.ubuntuPlatforms }}

    steps:
      - name: Filter & set outputs
        id: filter
        run: |
          echo "Original input: ${{ inputs.targetPlatforms }}"

          # Parse JSON & pick out Mac vs. everything else
          MAC_PLATFORMS=$(echo '${{ inputs.targetPlatforms }}' \
            | jq '[ .[] | select(. == "StandaloneOSX" or . == "iOS") ]')
          UBUNTU_PLATFORMS=$(echo '${{ inputs.targetPlatforms }}' \
            | jq '[ .[] | select(. != "StandaloneOSX" and . != "iOS") ]')

          echo "Mac platforms: $MAC_PLATFORMS"
          echo "Ubuntu platforms: $UBUNTU_PLATFORMS"

          # Write them directly to GITHUB_OUTPUT as job-level outputs
          echo "macPlatforms=$MAC_PLATFORMS" >> $GITHUB_OUTPUT
          echo "ubuntuPlatforms=$UBUNTU_PLATFORMS" >> $GITHUB_OUTPUT

      - name: Set job outputs
        id: set_outputs
        run: |
          # Now read them from $GITHUB_ENV and write them to $GITHUB_OUTPUT
          echo "macPlatforms=${MAC_PLATFORMS}" >> $GITHUB_OUTPUT
          echo "ubuntuPlatforms=${UBUNTU_PLATFORMS}" >> $GITHUB_OUTPUT
        env:
          MAC_PLATFORMS: ${{ env.MAC_PLATFORMS }}
          UBUNTU_PLATFORMS: ${{ env.UBUNTU_PLATFORMS }}

  build_on_macos:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ${{ matrix.os }}
    needs: filter_platforms
    strategy:
      matrix:
        os: 
          - macOS-latest
        targetPlatform:
          - StandaloneOSX
          - iOS
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Restore Unity Library Cache
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-${{ matrix.targetPlatform }}-
        
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}-${{ env.VERSION }}
          path: build/${{ matrix.targetPlatform }}
    
  build_on_ubuntu:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ${{ matrix.os }}
    needs: filter_platforms
    strategy:
      matrix:
        os: 
          - ubuntu-latest
        targetPlatform:
          - Android
          - WebGL
          - StandaloneWindows
          - StandaloneWindows64
          - StandaloneLinux64
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Restore Unity Library Cache
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-${{ matrix.targetPlatform }}-

      - name: Check Free Disk Space (Android only)
        if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1
        
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}-${{ env.VERSION }}
          path: build/${{ matrix.targetPlatform }}
  
  confirm_builds:
    name: Confirm Builds
    runs-on: ubuntu-latest
    needs: 
      - build_on_ubuntu
      - build_on_macos
    steps:
      - name: Confirm Builds
        run: echo "Creating builds successfully finished!"