name: 📋 Step 1 - Test

on:
  workflow_call:
    inputs:
      unityVersion:
        description: "Unity version to use"
        required: false
        default: 'auto'
        type: string
      useGitLfs:
        description: "Whether to use Git LFS (true/false)"
        required: false
        default: 'true'
        type: string
      editModePath:
        description: "Path to the EditMode tests folder"
        required: false
        default: 'Assets/Tests/Editor'
        type: string
      playModePath:
        description: "Path to the PlayMode tests folder"
        required: false
        default: 'Assets/Tests/PlayMode'
        type: string
      timeoutMinutes:
        description: "Timeout for each test job in minutes"
        type: number
        required: false
        default: 15
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_LICENSE:
        required: true

jobs:
  detect-tests:
    name: 🔍 Detect Tests
    uses: ./.github/workflows/unity-tests-detection.yml
    with:
      editModePath: ${{ inputs.editModePath }}
      playModePath: ${{ inputs.playModePath }}

  run-editmode:
    name: 🥪 EditMode Tests
    needs: [detect-tests]
    if: needs.detect-tests.outputs.has_editmode == 'true'
    uses: ./.github/workflows/unity-tests-runner.yml
    with:
      testMode: EditMode
      unityVersion: ${{ inputs.unityVersion }}
      useGitLfs: ${{ inputs.useGitLfs }}
      timeoutMinutes: ${{ inputs.timeoutMinutes }}
    secrets: inherit

  run-playmode:
    name: 🎮 PlayMode Tests
    needs: [detect-tests]
    if: needs.detect-tests.outputs.has_playmode == 'true'
    uses: ./.github/workflows/unity-tests-runner.yml
    with:
      testMode: PlayMode
      unityVersion: ${{ inputs.unityVersion }}
      useGitLfs: ${{ inputs.useGitLfs }}
      timeoutMinutes: ${{ inputs.timeoutMinutes }}
    secrets: inherit

  summarize-tests:
    name: 📄 Summarize Test Results
    if: always()
    runs-on: ubuntu-latest
    needs: [run-editmode, run-playmode]
    steps:
      - name: Write Summary
        run: |
          echo "### 🧪 Unity Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Mode   | Result     | Duration | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|------------|----------|--------|" >> $GITHUB_STEP_SUMMARY

          summarize() {
            local MODE=$1
            local ICON=$2
            local TOTAL=$3
            local PASSED=$4
            local RESULT=$5
            local SECONDS=$6

            local STATUS="❌"
            if [[ "$RESULT" == "Passed" ]]; then
              STATUS="✔️"
            elif [[ "$TOTAL" == "0" ]]; then
              STATUS="ℹ️"
            fi

            local MIN=$((SECONDS / 60))
            local SEC=$((SECONDS % 60))
            local DURATION="${MIN}m ${SEC}s"

            echo "| ${ICON} ${MODE} | ${PASSED} / ${TOTAL} | ${DURATION} | ${STATUS} |" >> $GITHUB_STEP_SUMMARY
          }

          summarize "EditMode" "🥪" \
            "${{ needs.run-editmode.outputs.total }}" \
            "${{ needs.run-editmode.outputs.passed }}" \
            "${{ needs.run-editmode.outputs.result }}" \
            "${{ needs.run-editmode.outputs.durationSeconds }}"

          summarize "PlayMode" "🎮" \
            "${{ needs.run-playmode.outputs.total }}" \
            "${{ needs.run-playmode.outputs.passed }}" \
            "${{ needs.run-playmode.outputs.result }}" \
            "${{ needs.run-playmode.outputs.durationSeconds }}"