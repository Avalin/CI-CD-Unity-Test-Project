name: 📋 Step 1 - Test

on:
  workflow_call:
    inputs:
      unityVersion:
        description: "Unity version to use"
        required: false
        default: 'auto'
        type: string
      licenseArtifactName:
        description: "Name of the uploaded license artifact"
        required: false
        default: 'unity-license'
        type: string
      useGitLfs:
        description: "Whether to use Git LFS (true/false)"
        required: false
        default: 'true'
        type: string
      editModePath:
        description: "Path to the EditMode tests folder"
        required: false
        default: 'Assets/Tests/Editor'
        type: string
      playModePath:
        description: "Path to the PlayMode tests folder"
        required: false
        default: 'Assets/Tests/PlayMode'
        type: string
      timeoutMinutes:
        description: "Timeout for each test job in minutes"
        type: number
        required: false
        default: 15
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_LICENSE:
        required: true

jobs:
  detect-tests:
    name: 🔍 Detect Tests
    uses: ./.github/workflows/unity-tests-detection.yml
    with:
      editModePath: ${{ inputs.editModePath }}
      playModePath: ${{ inputs.playModePath }}

  upload-license:
    name: 📥️ Upload Unity License
    needs: detect-tests
    if: needs.detect-tests.outputs.has_editmode == 'true' || needs.detect-tests.outputs.has_playmode == 'true'
    uses: ./.github/workflows/unity-license-uploader.yml
    with:
      artifactName: ${{ inputs.licenseArtifactName }}
    secrets: inherit

  run-editmode:
    name: 🥪 EditMode Tests
    needs: [detect-tests, upload-license]
    if: needs.detect-tests.outputs.has_editmode == 'true'
    uses: ./.github/workflows/unity-tests-runner.yml
    with:
      testMode: EditMode
      licenseArtifactName: ${{ inputs.licenseArtifactName }}
      unityVersion: ${{ inputs.unityVersion }}
      useGitLfs: ${{ inputs.useGitLfs }}
      timeoutMinutes: ${{ inputs.timeoutMinutes }}
    secrets: inherit

  run-playmode:
    name: 🎮 PlayMode Tests
    needs: [detect-tests, upload-license]
    if: needs.detect-tests.outputs.has_playmode == 'true'
    uses: ./.github/workflows/unity-tests-runner.yml
    with:
      testMode: PlayMode
      licenseArtifactName: ${{ inputs.licenseArtifactName }}
      unityVersion: ${{ inputs.unityVersion }}
      useGitLfs: ${{ inputs.useGitLfs }}
      timeoutMinutes: ${{ inputs.timeoutMinutes }}
    secrets: inherit

  comment-pr-results:
    name: 📝 Comment PR Test Results
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [run-editmode, run-playmode]
    steps:
      - name: 🧪 Summarize Test Results
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const { owner, repo, number } = context.issue;

            let summary = '### 🧪 **Unity Test Results**\n';
            let editmodePassed = '${{ needs.run-editmode.result }}' === 'success';
            let playmodePassed = '${{ needs.run-playmode.result }}' === 'success';

            summary += `- 🥪 EditMode: ${editmodePassed ? '✅ Passed' : '❌ Failed'}\n`;
            summary += `- 🎮 PlayMode: ${playmodePassed ? '✅ Passed' : '❌ Failed'}\n`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: summary
            });
