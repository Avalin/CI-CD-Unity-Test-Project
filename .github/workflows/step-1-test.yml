name: üìã Step 1 - Test

on:
  workflow_call:
    inputs:
      unityVersion:
        description: "Unity version to use"
        required: false
        default: 'auto'
        type: string
      useGitLfs:
        description: "Whether to use Git LFS (true/false)"
        required: false
        default: 'true'
        type: string
      editModePath:
        description: "Path to the EditMode tests folder"
        required: false
        default: 'Assets/Tests/Editor'
        type: string
      playModePath:
        description: "Path to the PlayMode tests folder"
        required: false
        default: 'Assets/Tests/PlayMode'
        type: string
      timeoutMinutes:
        description: "Timeout for each test job in minutes"
        required: false
        default: 15
        type: number
      quietMode:
        description: "Enable quiet mode to suppress uploads/logs unless tests fail"
        required: false
        default: 'false'
        type: string
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_LICENSE:
        required: true

jobs:
  detect-tests:
    name: üîç Detect Tests
    uses: ./.github/workflows/unity-tests-detection.yml
    with:
      editModePath: ${{ inputs.editModePath }}
      playModePath: ${{ inputs.playModePath }}

  run-editmode:
    name: ü•™ EditMode Tests
    needs: [detect-tests]
    if: needs.detect-tests.outputs.has_editmode == 'true'
    uses: ./.github/workflows/unity-tests-runner.yml
    with:
      testMode: EditMode
      unityVersion: ${{ inputs.unityVersion }}
      useGitLfs: ${{ inputs.useGitLfs }}
      timeoutMinutes: ${{ inputs.timeoutMinutes }}
      quietMode: ${{ inputs.quietMode }}
    secrets: inherit

  run-playmode:
    name: üéÆ PlayMode Tests
    needs: [detect-tests]
    if: needs.detect-tests.outputs.has_playmode == 'true'
    uses: ./.github/workflows/unity-tests-runner.yml
    with:
      testMode: PlayMode
      unityVersion: ${{ inputs.unityVersion }}
      useGitLfs: ${{ inputs.useGitLfs }}
      timeoutMinutes: ${{ inputs.timeoutMinutes }}
      quietMode: ${{ inputs.quietMode }}
    secrets: inherit

  summarize-tests:
    name: üìÑ Summarize Test Results
    if: |
      always() &&
      (
        inputs.quietMode == 'false' ||
        (needs.run-editmode.result == 'success' && needs.run-editmode.outputs.failed == 'true') ||
        (needs.run-playmode.result == 'success' && needs.run-playmode.outputs.failed == 'true')
      )
    runs-on: ubuntu-latest
    needs: [run-editmode, run-playmode]
    steps:
      - name: Write Summary
        run: |
          echo "### üìã Unity Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Mode   | Result     | Duration | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|------------|----------|--------|" >> $GITHUB_STEP_SUMMARY

          summarize() {
            local MODE=$1
            local ICON=$2
            local TOTAL=$3
            local PASSED=$4
            local RESULT=$5
            local DURATION=$6

            local DISPLAY_RESULT="- / -"
            local DISPLAY_DURATION="N/A"
            local STATUS="‚ÑπÔ∏è"

            if [[ -n "$TOTAL" && "$TOTAL" != "0" && "$RESULT" != "Skipped" && "$RESULT" != "" && "$RESULT" != "null" ]]; then
              DISPLAY_RESULT="${PASSED} / ${TOTAL}"
              DISPLAY_DURATION="$DURATION"

              if [[ "$RESULT" == "Passed" ]]; then
                STATUS="‚úîÔ∏è"
              else
                STATUS="‚ùå"
              fi
            fi

            echo "| ${ICON} ${MODE} | ${DISPLAY_RESULT} | ${DISPLAY_DURATION} | ${STATUS} |" >> $GITHUB_STEP_SUMMARY
          }

          summarize "EditMode" "ü•™" \
            "${{ needs.run-editmode.outputs.total }}" \
            "${{ needs.run-editmode.outputs.passed }}" \
            "${{ needs.run-editmode.outputs.result }}" \
            "${{ needs.run-editmode.outputs.duration }}"

          summarize "PlayMode" "üéÆ" \
            "${{ needs.run-playmode.outputs.total }}" \
            "${{ needs.run-playmode.outputs.passed }}" \
            "${{ needs.run-playmode.outputs.result }}" \
            "${{ needs.run-playmode.outputs.duration }}"

      - name: Download Test Result Artifacts
        if: inputs.quietMode == 'false' || needs.run-editmode.outputs.failed == 'true' || needs.run-playmode.outputs.failed == 'true'
        uses: actions/download-artifact@v4
        with:
          path: downloaded-results

      - name: Append Failed Test Details
        id: failed-check
        if: inputs.quietMode == 'false' || needs.run-editmode.outputs.failed == 'true' || needs.run-playmode.outputs.failed == 'true'
        run: |
          set +e
          HAS_FAILS=0
          FAIL_BLOCK=""

          for MODE in EditMode PlayMode; do
            XML=$(find downloaded-results -type f -path "*Unity-${MODE}-*" -name "*.xml" | head -n 1)

            if [[ -f "$XML" ]]; then
              FAILS=$(grep -oP 'test-case[^>]+result="Failed"' "$XML" | grep -oP 'fullname="\K[^"]+')
              if [[ -n "$FAILS" ]]; then
                HAS_FAILS=1
                FAIL_BLOCK+="### ‚ùå ${MODE} Failed Tests"$'\n'
                while read -r fail; do
                  FAIL_BLOCK+="- \`$fail\`"$'\n'
                done <<< "$FAILS"
                FAIL_BLOCK+=$'\n'
              fi
            fi
          done

          if [[ "$HAS_FAILS" == "1" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>‚ùå Failed Tests (details)</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "$FAIL_BLOCK" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi

          echo "has_fails=$HAS_FAILS" >> $GITHUB_OUTPUT

  fail-on-test-failure:
    name: üö® Fail if Any Tests Failed
    if: always()
    runs-on: ubuntu-latest
    needs: [run-editmode, run-playmode, summarize-tests]
    steps:
      - name: Check if any tests failed
        run: |
          if [[ "${{ needs.run-editmode.outputs.failed }}" == "true" || "${{ needs.run-playmode.outputs.failed }}" == "true" ]]; then
            echo "‚ùå One or more Unity test jobs failed."
            exit 1
          else
            echo "‚úÖ All Unity test jobs passed."
          fi
