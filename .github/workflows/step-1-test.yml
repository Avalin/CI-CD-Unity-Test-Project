name: 📋 Step 1 - Test

on:
  workflow_call:
    inputs:
      unityVersion:
        description: "Unity version to use"
        required: false
        default: 'auto'
        type: string
      licenseArtifactName:
        description: "Name of the uploaded license artifact"
        required: false
        default: 'unity-license'
        type: string
      useGitLfs:
        description: "Whether to use Git LFS (true/false)"
        required: false
        default: 'true'
        type: string
      editModePath:
        description: "Path to the EditMode tests folder"
        required: false
        default: 'Assets/Tests/Editor'
        type: string
      playModePath:
        description: "Path to the PlayMode tests folder"
        required: false
        default: 'Assets/Tests/PlayMode'
        type: string
      timeoutMinutes:
        description: "Timeout for each test job in minutes"
        type: number
        required: false
        default: 15
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_LICENSE:
        required: true

jobs:
  detect-tests:
    name: 🔍 Detect Tests
    uses: ./.github/workflows/unity-tests-detection.yml
    with:
      editModePath: ${{ inputs.editModePath }}
      playModePath: ${{ inputs.playModePath }}

  upload-license:
    name: 📥️ Upload Unity License
    needs: detect-tests
    if: needs.detect-tests.outputs.has_editmode == 'true' || needs.detect-tests.outputs.has_playmode == 'true'
    uses: ./.github/workflows/unity-license-uploader.yml
    with:
      artifactName: ${{ inputs.licenseArtifactName }}
    secrets: inherit

  run-editmode:
    name: 🥪 EditMode Tests
    needs: [detect-tests, upload-license]
    if: needs.detect-tests.outputs.has_editmode == 'true'
    uses: ./.github/workflows/unity-tests-runner.yml
    with:
      testMode: EditMode
      licenseArtifactName: ${{ inputs.licenseArtifactName }}
      unityVersion: ${{ inputs.unityVersion }}
      useGitLfs: ${{ inputs.useGitLfs }}
      timeoutMinutes: ${{ inputs.timeoutMinutes }}
    secrets: inherit

  run-playmode:
    name: 🎮 PlayMode Tests
    needs: [detect-tests, upload-license]
    if: needs.detect-tests.outputs.has_playmode == 'true'
    uses: ./.github/workflows/unity-tests-runner.yml
    with:
      testMode: PlayMode
      licenseArtifactName: ${{ inputs.licenseArtifactName }}
      unityVersion: ${{ inputs.unityVersion }}
      useGitLfs: ${{ inputs.useGitLfs }}
      timeoutMinutes: ${{ inputs.timeoutMinutes }}
    secrets: inherit

  summarize-tests:
    name: 📄 Summarize Test Results
    if: always()
    runs-on: ubuntu-latest
    needs: [run-editmode, run-playmode]
    env:
      EDIT_DURATION: ${{ needs.run-editmode.outputs.durationMinutes }}
      EDIT_SUMMARY: ${{ needs.run-editmode.outputs.resultSummary }}
      PLAY_DURATION: ${{ needs.run-playmode.outputs.durationMinutes }}
      PLAY_SUMMARY: ${{ needs.run-playmode.outputs.resultSummary }}
    steps:
      - name: Write Summary
        run: |
          echo "### 🧪 Unity Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          HAS_EDITMODE=${{ needs.run-editmode.result != 'skipped' }}
          HAS_PLAYMODE=${{ needs.run-playmode.result != 'skipped' }}

          if [[ "$HAS_EDITMODE" == "false" && "$HAS_PLAYMODE" == "false" ]]; then
            echo "- ℹ️ No EditMode or PlayMode tests detected." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          echo "| Mode | Result | Duration (min) | Passed / Total |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|----------------|----------------|" >> $GITHUB_STEP_SUMMARY

          if [[ "$HAS_EDITMODE" == "true" ]]; then
            EDIT_RESULT="${{ needs.run-editmode.result }}"
            EDIT_ICON=$([[ "$EDIT_RESULT" == "success" ]] && echo "✅ Passed" || echo "❌ Failed")
            EDIT_DURATION="${{ needs.run-editmode.outputs.durationMinutes }}"
            EDIT_SUMMARY="${{ needs.run-editmode.outputs.resultSummary }}"
            echo "| 🥪 EditMode | $EDIT_ICON | $EDIT_DURATION | $EDIT_SUMMARY |" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "$HAS_PLAYMODE" == "true" ]]; then
            PLAY_RESULT="${{ needs.run-playmode.result }}"
            PLAY_ICON=$([[ "$PLAY_RESULT" == "success" ]] && echo "✅ Passed" || echo "❌ Failed")
            PLAY_DURATION="${{ needs.run-playmode.outputs.durationMinutes }}"
            PLAY_SUMMARY="${{ needs.run-playmode.outputs.resultSummary }}"
            echo "| 🎮 PlayMode | $PLAY_ICON | $PLAY_DURATION | $PLAY_SUMMARY |" >> $GITHUB_STEP_SUMMARY
          fi
