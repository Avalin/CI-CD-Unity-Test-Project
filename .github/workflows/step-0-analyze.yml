name: 🔍 Step 0 - Static Analysis

on:
  workflow_call:
    inputs:
      allowAutofix:
        description: "Whether to allow autofixing lint issues on PR"
        required: false
        default: 'false'
        type: string
      allowFail:
        description: "Whether lint errors should fail the pipeline"
        required: false
        default: 'false'
        type: string

jobs:
  analyze:
    name: Run dotnet format (if .sln exists)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'

      - name: Check for .sln file
        id: sln_check
        run: |
          sln_files=$(find . -maxdepth 1 -name "*.sln")
          count=$(echo "$sln_files" | wc -l)

          echo "Found $count solution file(s):"
          echo "$sln_files"

          if [[ "$count" -eq 1 ]]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
            echo "sln_file=$(echo "$sln_files")" >> "$GITHUB_OUTPUT"
          elif [[ "$count" -gt 1 ]]; then
            echo "❌ Multiple .sln files found. Please keep only one for CI."
            exit 1
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Detect NuGet usage
        id: uses_nuget
        run: |
          if grep -q '<PackageReference' ./*.csproj 2>/dev/null; then
            echo "🧃 Detected NuGet dependencies."
            echo "nuget=true" >> "$GITHUB_OUTPUT"
          else
            echo "ℹ️ No NuGet packages found — skipping restore."
            echo "nuget=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Restore NuGet packages (if needed)
        if: steps.uses_nuget.outputs.nuget == 'true'
        run: dotnet restore "${{ steps.sln_check.outputs.sln_file }}"

      - name: Check if NuGet packages directory exists (after restore)
        id: check_nuget_cache
        if: steps.uses_nuget.outputs.nuget == 'true'
        run: |
          if [ -d "$HOME/.nuget/packages" ]; then
            echo "NuGet packages exist. Will cache."
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "No NuGet packages found. Skipping cache."
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Save NuGet cache
        if: steps.check_nuget_cache.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Run dotnet format
        id: formatter
        if: steps.sln_check.outputs.found == 'true'
        continue-on-error: true
        env:
          USES_NUGET: ${{ steps.uses_nuget.outputs.nuget }}
          SLN_FILE: ${{ steps.sln_check.outputs.sln_file }}
        run: |
          dotnet restore "$SLN_FILE"
          dotnet format "$SLN_FILE" --verify-no-changes --verbosity minimal

      - name: Auto-fix formatting
        if: failure() && fromJSON(inputs.allowAutofix) && github.event_name == 'pull_request'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          dotnet format --verbosity minimal
          git add .
          git commit -m "chore: auto-format via dotnet format"
          git push

      - name: Comment on PR if formatting failed
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const { owner, repo, number } = context.issue;
            const message = `❌ **dotnet format** failed — please run \`dotnet format\` locally and commit the changes.`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: message
            });

      - name: Skip dotnet format (no .sln found)
        if: steps.sln_check.outputs.found == 'false'
        run: echo "::notice::ℹ️ No .sln file found — skipping static analysis"

      - name: Add analysis summary
        if: always()
        env:
          FOUND_SOLUTION: ${{ steps.sln_check.outputs.found }}
          FORMAT_OUTCOME: ${{ steps.formatter.outcome }}
        run: |
          echo "### Static Analysis Summary" >> $GITHUB_STEP_SUMMARY
          if [[ "$FOUND_SOLUTION" == "true" ]]; then
            if [[ "$FORMAT_OUTCOME" == "success" ]]; then
              echo "✅ dotnet format passed." >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ dotnet format failed." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ No .sln file found — skipped dotnet format." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail job if formatting failed and allowFail is false
        if: steps.formatter.outcome == 'failure' && fromJSON(inputs.allowFail) == 'false'
        run: |
          echo "::error::dotnet format failed and allowFail is false — failing pipeline."
          exit 1