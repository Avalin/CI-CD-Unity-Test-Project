name: 🔍 Step 0 - Roslyn Code Analysis

on:
  workflow_call:
    inputs:
      allowAutofix:
        description: "Whether to allow autofixing lint issues on PR"
        required: false
        default: 'false'
        type: string
      allowFail:
        description: "Whether lint errors should fail the pipeline"
        required: false
        default: 'false'
        type: string
      unityVersion:
        description: "Unity version to use"
        required: false
        default: 'auto'
        type: string
      licenseArtifactName:
        description: "Name of the uploaded license artifact"
        required: false
        default: 'unity-license'
        type: string
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true

jobs:
  analyze:
    name: Run Unity Roslyn Code Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Unity License Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.licenseArtifactName }}
          path: license

      - name: Install Unity using license file
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ github.workspace }}/license/Unity_lic.ulf
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ inputs.unityVersion }}

      - name: Run Unity Code Analysis
        id: code_analysis
        run: |
          echo "🧪 Running Unity code analysis..."
          unity -batchmode -nographics -quit \
            -projectPath . \
            -executeMethod UnityEditor.Compilation.CompilationPipeline.RequestScriptCompilation \
            -logFile unity-analysis.log

          echo "📄 Finished compilation, checking log for errors/warnings..."

          issues=$(grep -E "^(.*\|)?(warning|error) CS[0-9]+" unity-analysis.log || true)

          if [[ -n "$issues" ]]; then
            echo "❌ Static analysis found issues:"
            echo "$issues" | head -n 20
            echo "has_issues=true" >> "$GITHUB_OUTPUT"
          else
            echo "✅ No static analysis issues found."
            echo "has_issues=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Add analysis summary
        if: always()
        env:
          HAS_ISSUES: ${{ steps.code_analysis.outputs.has_issues }}
        run: |
          echo "### 🔍 Static Analysis Summary" >> $GITHUB_STEP_SUMMARY
          if [[ "$HAS_ISSUES" == "true" ]]; then
            echo "❌ Issues detected by Unity code analysis." >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -E "^(.*\|)?(warning|error) CS[0-9]+" unity-analysis.log | head -n 20 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No issues detected by Unity Roslyn analyzers." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail job if issues found and allowFail is false
        if: steps.code_analysis.outputs.has_issues == 'true' && fromJSON(inputs.allowFail) == 'false'
        run: |
          echo "::error::Static analysis failed and allowFail is false — failing pipeline."
          exit 1