name: 🏷️ Build Version Generator

on:
  workflow_call:
    inputs:
      buildType:
        description: "Build type: preview | release_candidate | release"
        required: true
        type: string
      version:
        description: "Optional version override from workflow input"
        required: false
        type: string
    outputs:
      version:
        description: "The resolved build version string"
        value: ${{ jobs.determine.outputs.version }}

jobs:
  determine:
    name: 🏷️ Generate Build Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch tags

      - name: Determine Version
        id: get_version
        shell: bash
        run: |
          REF="${GITHUB_REF}"
          EVENT="${GITHUB_EVENT_NAME}"
          INPUT_VERSION="${{ inputs.version }}"
          BUILD_TYPE="${{ inputs.buildType }}"

          # For release builds, a Git tag is required (triggered by pushing a tag)
          if [[ "$BUILD_TYPE" == "release" ]]; then
            if [[ "$REF" =~ ^refs/tags/(v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"

              # ⛔ Validate the tag format strictly as vX.Y.Z (no suffixes)
              if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "❌ Invalid release tag format: '$VERSION'"
                echo "Must be in format: vX.Y.Z (no suffixes like -rc)"
                exit 1
              fi
            else
              echo "❌ For 'release' builds, a Git tag is required. This should be triggered by pushing a tag."
              exit 1
            fi

          # For release_candidate without manual version → auto-generate vX.Y.Z-rc.N
          elif [[ "$BUILD_TYPE" == "release_candidate" && -z "$INPUT_VERSION" ]]; then
            echo "🔍 No version provided — generating next available RC version..."

            BASE_TAG=$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | sed -E 's/^((v[0-9]+\.[0-9]+\.[0-9]+)).*/\1/' | sort -V | uniq | tail -n 1)
            BASE_TAG=${BASE_TAG:-v0.0.0}
            echo "👀 Using latest base tag: $BASE_TAG"

            chmod +x .github/scripts/build/version-generator-for-rc.sh
            VERSION=$(./.github/scripts/build/version-generator-for-rc.sh "$BASE_TAG" | tail -n 1)

          # For release_candidate with a manual version → use as base
          elif [[ "$BUILD_TYPE" == "release_candidate" && -n "$INPUT_VERSION" ]]; then
            echo "🔢 Using provided version as RC base: $INPUT_VERSION"
            chmod +x .github/scripts/build/version-generator-for-rc.sh
            VERSION=$(./.github/scripts/build/version-generator-for-rc.sh "$INPUT_VERSION" | tail -n 1)

          # Manual override for non-RC builds
          elif [[ "$BUILD_TYPE" != "release" && -n "$INPUT_VERSION" ]]; then
            VERSION="$INPUT_VERSION"

          # Pull Request build
          elif [[ "$REF" =~ ^refs/pull/([0-9]+)/merge$ ]]; then
            PR_NUMBER=$(printf "%04d" "${BASH_REMATCH[1]}")
            VERSION="PR-${PR_NUMBER}"

          # Branch-based manual or CI build
          elif [[ "$REF" =~ ^refs/heads/(.+)$ ]]; then
            BRANCH_NAME=$(echo "${BASH_REMATCH[1]}" | tr '/' '-')
            if [[ "$EVENT" == "workflow_dispatch" ]]; then
              VERSION="manual-${BRANCH_NAME}"
            else
              VERSION="${BRANCH_NAME}"
            fi

          # Fallback to commit SHA
          else
            SHORT_SHA=$(git rev-parse --short HEAD)
            VERSION="commit-${SHORT_SHA}"
          fi

          # If version already exists as a tag, fail early
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "❌ Version '$VERSION' already exists as a tag!"
            echo "🧩 Existing tags:"
            git tag --list "${VERSION%%-*}*" || true
            exit 1
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🏷️ Determined version: $VERSION"
