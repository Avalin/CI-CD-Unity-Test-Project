name: 🌍 Step 4 - Deploy

on:
  workflow_call:
    inputs:
      buildType:
        type: string
        required: true
      version:
        description: "The version/tag name (e.g., v1.2.3)"
        type: string
        required: true
      projectName:
        type: string
        required: true
      deployTargets:
        description: "JSON array of deploy targets (e.g. ['itch.io','appcenter','firebase','s3','gh-pages'])"
        type: string
        default: '[]'
        required: false
    secrets:
      DEPLOY_API_KEY:
        required: false
      ITCH_USERNAME:
        required: false
      ITCH_PROJECT:
        required: false
      APPCENTER_OWNER_NAME:
        required: false
      FIREBASE_TOKEN:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      S3_BUCKET:
        required: false
      GH_PAGES_TOKEN:
        required: false
      STEAM_USERNAME:
        required: false
      STEAM_PASSWORD:
        required: false
      STEAM_APP_ID:
        required: false
      STEAM_DEPOT_VDF_PATH:
        required: false
      APPSTORE_API_KEY_ID:
        required: false
      APPSTORE_API_ISSUER_ID:
        required: false
      APPSTORE_API_PRIVATE_KEY:
        required: false
      DISCORD_WEBHOOK:
        required: false

jobs:
  deploy_ubuntu:
    if: ${{ inputs.deployTargets != '[]' }}
    name: 🚀 Deploy Targets
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(inputs.deployTargets) }}
    runs-on: ubuntu-latest
    env:
      DEPLOY_DIR: deployment-artifacts/${{ inputs.projectName }}-${{ inputs.version }}

    steps:
      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: deployment-artifacts

      - name: 🧠 Show Deployment Info
        run: |
          echo "Deploying to: ${{ matrix.target }}"
          echo "Project: ${{ inputs.projectName }}"
          echo "Version: ${{ inputs.version }}"
          echo "Build type: ${{ inputs.buildType }}"

      - name: 🧾 List Artifacts
        run: ls -R "$DEPLOY_DIR" || echo "No artifacts found."

      # ───── itch.io ─────
      - name: 🕹️ Deploy to itch.io
        if: matrix.target == 'itch.io'
        run: |
          if [ -z "${{ secrets.ITCH_USERNAME }}" ] || [ -z "${{ secrets.ITCH_PROJECT }}" ]; then
            echo "⚠️ Missing itch.io credentials. Skipping..."; exit 0;
          fi
          butler push "$DEPLOY_DIR" "${{ secrets.ITCH_USERNAME }}/${{ secrets.ITCH_PROJECT }}:${{ inputs.buildType }}"
        env:
          BUTLER_API_KEY: ${{ secrets.DEPLOY_API_KEY }}

      # ───── App Center ─────
      - name: 📱 Deploy to App Center
        if: matrix.target == 'appcenter'
        run: |
          if [ -z "${{ secrets.APPCENTER_OWNER_NAME }}" ] || [ -z "${{ secrets.DEPLOY_API_KEY }}" ]; then
            echo "⚠️ Missing App Center credentials. Skipping..."; exit 0;
          fi
          FILES=$(find "$DEPLOY_DIR" -type f \( -name "*.apk" -o -name "*.aab" -o -name "*.ipa" \))
          if [ -z "$FILES" ]; then echo "❌ No mobile artifacts found."; exit 0; fi

          for file in $FILES; do
            echo "🚀 Deploying $file"
            npx appcenter distribute release \
              --app "${{ secrets.APPCENTER_OWNER_NAME }}/${{ inputs.projectName }}" \
              --file "$file" \
              --group "Testers" \
              --token "${{ secrets.DEPLOY_API_KEY }}"
          done

      # ───── Firebase ─────
      - name: 🔥 Deploy to Firebase Hosting
        if: matrix.target == 'firebase'
        run: |
          if [ -z "${{ secrets.FIREBASE_TOKEN }}" ]; then
            echo "⚠️ Missing Firebase token. Skipping..."; exit 0;
          fi
          cd "$DEPLOY_DIR/WebGL" || exit 1
          npm install -g firebase-tools
          firebase deploy --token "${{ secrets.FIREBASE_TOKEN }}"

      # ───── AWS S3 ─────
      - name: ☁️ Deploy to AWS S3
        if: matrix.target == 's3'
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || [ -z "${{ secrets.S3_BUCKET }}" ]; then
            echo "⚠️ Missing AWS credentials or bucket. Skipping..."; exit 0;
          fi
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws s3 sync "$DEPLOY_DIR/WebGL" "s3://${{ secrets.S3_BUCKET }}" --delete

      # ───── GitHub Pages ─────
      - name: 🔍 Check WebGL Build Exists
        if: matrix.target == 'gh-pages'
        run: |
          if [ ! -d "$DEPLOY_DIR/WebGL" ]; then
            echo "❌ WebGL build not found. Cannot deploy to GitHub Pages."
            exit 1
          fi

      - name: 🔎 Detect WebGL Compression Format
        if: matrix.target == 'gh-pages'
        run: |
          cd "$DEPLOY_DIR/WebGL"

          echo "🔍 Checking for compression in WebGL build..."

          has_br=0
          has_gz=0

          if find . -type f -name "*.br" | grep -q .; then
            has_br=1
          fi

          if find . -type f -name "*.gz" | grep -q .; then
            has_gz=1
          fi

          if [ "$has_br" -eq 1 ]; then
            echo "⚠️ WebGL build is compressed: .br files or code references likely present."
          elif [ "$has_gz" -eq 1 ]; then
            echo "⚠️ WebGL build is compressed: .gz files or code references likely present."
          else
            echo "✅ WebGL build is uncompressed (no .br/.gz files)."
          fi

      - name: 🩹 Patch & Decompress Unity WebGL for GitHub Pages
        if: matrix.target == 'gh-pages'
        run: |
          echo "🔧 Patching Unity WebGL files for GitHub Pages (remove .br/.gz + references)..."

          # Install brotli/gzip tools if needed
          sudo apt-get update && sudo apt-get install -y brotli gzip

          cd "$DEPLOY_DIR/WebGL"

          # 1) Decompress any .br → original
          find . -type f -name "*.br" | while read f; do
            out="${f%.br}"
            echo "Decompressing Brotli: $f → $out"
            brotli -d -f "$f" -o "$out"
            rm "$f"
          done

          # 2) Decompress any .gz → original
          find . -type f -name "*.gz" | while read f; do
            out="${f%.gz}"
            echo "Decompressing Gzip: $f → $out"
            gunzip -c "$f" > "$out"
            rm "$f"
          done

          # 3) Strip out .br/.gz references and disable compressionFormat in all .js, .json, and .html
          #    (Sometimes Unity stashes references in index.html or other JS files)
          find . -type f \( -name "*.js" -o -name "*.json" -o -name "*.html" \) -print0 | xargs -0 sed -i \
            -e 's/\.br//g' \
            -e 's/\.gz//g' \
            -e 's/compressionFormat:"br"/compressionFormat:null/g' \
            -e 's/compressionFormat:"gzip"/compressionFormat:null/g' \
            -e 's/"compressionFormat":"br"/"compressionFormat":null/g' \
            -e 's/"compressionFormat":"gzip"/"compressionFormat":null/g'

          echo "✅ All .br/.gz references removed; files are now uncompressed for GH Pages."

      - name: 🌍 Deploy to GitHub Pages
        if: matrix.target == 'gh-pages'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.DEPLOY_DIR }}/WebGL

      # ───── Steam ─────
      - name: 🎮 Deploy to Steam
        if: matrix.target == 'steam'
        run: |
          VDF_PATH="${{ secrets.STEAM_DEPOT_VDF_PATH }}"
          if [ -z "$VDF_PATH" ]; then
            VDF_PATH="$DEPLOY_DIR/steam/app_build.vdf"
          fi

          if [ -z "${{ secrets.STEAM_USERNAME }}" ] || [ -z "${{ secrets.STEAM_PASSWORD }}" ] || [ -z "${{ secrets.STEAM_APP_ID }}" ]; then
            echo "⚠️ Missing Steam credentials or App ID. Skipping..."; exit 0;
          fi

          echo "🛠️ Installing SteamCMD..."
          mkdir -p ~/steamcmd && cd ~/steamcmd
          curl -sSL https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz | tar -xz

          echo "🔑 Logging into Steam and triggering build..."
          ./steamcmd.sh +login "${{ secrets.STEAM_USERNAME }}" "${{ secrets.STEAM_PASSWORD }}" +run_app_build "$VDF_PATH" +quit

      # ───── Discord ─────
      - name: 🤖 Deploy to Discord
        if: matrix.target == 'discord'
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "⚠️ Missing Discord webhook. Skipping..."; exit 0;
          fi

          FILE=$(find "$DEPLOY_DIR" -type f \( -name "*.apk" -o -name "*.ipa" -o -name "*.zip" \) | head -n 1)
          if [ -z "$FILE" ]; then echo "❌ No artifact found to upload to Discord."; exit 0; fi

          echo "📤 Uploading $FILE to Discord..."
          curl -F "file=@$FILE" "${{ secrets.DISCORD_WEBHOOK }}"

      # ───── Custom Server ─────
      - name: 🖥️ Deploy to Custom Server (via SCP or Rsync)
        if: matrix.target == 'custom-server'
        run: |
          if [ -z "${{ secrets.CUSTOM_SERVER_HOST }}" ] || [ -z "${{ secrets.CUSTOM_SERVER_USER }}" ] || [ -z "${{ secrets.CUSTOM_SERVER_KEY }}" ]; then
            echo "⚠️ Missing custom server credentials. Skipping..."; exit 0;
          fi

          echo "➡️ Deploying to custom server..."
          mkdir -p ~/.ssh
          echo "${{ secrets.CUSTOM_SERVER_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.CUSTOM_SERVER_HOST }}" >> ~/.ssh/known_hosts

          rsync -avz "$DEPLOY_DIR/" "${{ secrets.CUSTOM_SERVER_USER }}@${{ secrets.CUSTOM_SERVER_HOST }}:/var/www/mygame/"
        env:
          CUSTOM_SERVER_HOST: ${{ secrets.CUSTOM_SERVER_HOST }}
          CUSTOM_SERVER_USER: ${{ secrets.CUSTOM_SERVER_USER }}
          CUSTOM_SERVER_KEY: ${{ secrets.CUSTOM_SERVER_KEY }}

      # ───── Summary ─────
      - name: 🧾 Add to Summary
        run: |
          echo "### 📦 Deployment: ${{ matrix.target }}" >> $GITHUB_STEP_SUMMARY
          echo "- Project: \`${{ inputs.projectName }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Build type: \`${{ inputs.buildType }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Version: \`${{ inputs.version }}\`" >> $GITHUB_STEP_SUMMARY

          if [ -d "$DEPLOY_DIR" ]; then
            echo "- Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ❌ Failed (No deployment artifacts found)" >> $GITHUB_STEP_SUMMARY
          fi

  deploy_macOS:
    if: contains(fromJson(inputs.deployTargets), 'testflight')
    name: 🍏 Deploy to TestFlight (macOS)
    runs-on: macos-latest
    env:
      DEPLOY_DIR: deployment-artifacts/${{ inputs.projectName }}-${{ inputs.version }}

    steps:
      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: deployment-artifacts

      - name: 🍏 Deploy .ipa to TestFlight
        run: |
          if [ -z "${{ secrets.APPSTORE_API_KEY_ID }}" ] || [ -z "${{ secrets.APPSTORE_API_ISSUER_ID }}" ] || [ -z "${{ secrets.APPSTORE_API_PRIVATE_KEY }}" ]; then
            echo "⚠️ Missing App Store Connect API credentials. Skipping..."; exit 0;
          fi

          FILE=$(find "$DEPLOY_DIR" -type f -name "*.ipa" | head -n 1)
          if [ -z "$FILE" ]; then echo "❌ No .ipa found to upload."; exit 0; fi

          echo "${{ secrets.APPSTORE_API_PRIVATE_KEY }}" > private_key.p8

          echo "🚀 Uploading $FILE to TestFlight..."
          xcrun altool \
            --upload-app \
            --type ios \
            --file "$FILE" \
            --apiKey "${{ secrets.APPSTORE_API_KEY_ID }}" \
            --apiIssuer "${{ secrets.APPSTORE_API_ISSUER_ID }}" \
            --private-key-path private_key.p8
          rm private_key.p8
        env:
          FASTLANE_DISABLE_COLORS: 1
