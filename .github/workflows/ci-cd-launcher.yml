name: üèóÔ∏è CI/CD Launcher

on:
  # Allow manual dispatch with a buildType input
  workflow_dispatch:
    inputs:
      buildType:
        description: "Build type: 'preview' for manual/dev builds, 'release_candidate' for staging (e.g., v1.2.3-rc.1), 'release' for production (e.g., v1.2.3)"
        required: true
        default: "preview"
        type: choice
        options:
          - preview
          - release_candidate
          - release
      skipTests:
        description: "Whether tests should be skipped"
        required: true
        default: "false"
        type: choice
        options:
          - 'true'
          - 'false'
      deployTargets:
        description: "JSON array of deploy targets (e.g. [\"itch.io\",\"s3\"])"
        required: true
        default: '["gh-pages"]'
        type: string
      targetPlatforms:
        description: "JSON array of target platforms (e.g. [\"WebGL\",\"iOS\"])"
        required: true
        default: '["WebGL"]'
        type: string
      version:
        description: Optional version override
        type: string
        required: false
  # Automatically run tests & builds on certain branches or PR changes
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'            # matches v1.2.3
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'  # matches v1.2.3-rc.1
    paths:
      - 'Assets/**'
      - 'Packages/**'
      - 'ProjectSettings/**'
      - 'Tests/**'
  pull_request:
    types: [ready_for_review, synchronize, reopened]
    paths:
      - 'Assets/**'
      - 'Packages/**'
      - 'ProjectSettings/**'
      - 'Tests/**'

permissions:
  contents: write
  pull-requests: write

jobs:
  skip_ci:
    name: Check Skip CI triggers
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check last commit for [skip ci]   
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MSG"

          if [[ "$COMMIT_MSG" == *"[skip ci]"* || "$COMMIT_MSG" == *"[ci skip]"* ]]; then
            echo "Skipping CI as requested."
            echo "should_run=false" >> "$GITHUB_OUTPUT"
          else
            echo "Proceeding with CI."
            echo "should_run=true" >> "$GITHUB_OUTPUT"
          fi

  validate_github_secrets:
    name: Validate GitHub Secrets
    needs: skip_ci
    if: ${{ needs.skip_ci.outputs.should_run == 'true'}}
    runs-on: ubuntu-latest
    steps:
      - name: Validate Required GitHub Secrets
        run: |
          REQUIRED_SECRETS=("CICD_PAT" "UNITY_EMAIL" "UNITY_LICENSE" "UNITY_PASSWORD")
          MISSING=0

          for SECRET_NAME in "${REQUIRED_SECRETS[@]}"; do
            VALUE_VAR="SECRET_${SECRET_NAME}"
            VALUE="${!VALUE_VAR}"

            if [[ -z "$VALUE" || "$VALUE" == "" ]]; then
              echo "‚ùå Required secret '$SECRET_NAME' is not set!"
              MISSING=1
            else
              echo "‚úÖ Secret '$SECRET_NAME' is present."
            fi
          done

          if [[ "$MISSING" -eq 1 ]]; then
            echo "‚ùå One or more required secrets are missing. Failing..."
            exit 1
          fi
        env:
          SECRET_CICD_PAT: ${{ secrets.CICD_PAT }}
          SECRET_UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          SECRET_UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          SECRET_UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

  validate_github_variables:
    name: Validate GitHub Variables
    needs: skip_ci
    if: ${{ needs.skip_ci.outputs.should_run == 'true'}}
    uses: avalin/unity-ci-templates/.github/workflows/validate-github-vars.yml@main
    with:
      requiredVars: |
        [
          "PROJECT_NAME",
          "DEPLOY_TARGETS",
          "TARGET_PLATFORMS_PREVIEW",
          "TARGET_PLATFORMS_RC",
          "TARGET_PLATFORMS_RELEASE"
        ]

  prepare_metadata:
    name: Prepare Metadata
    needs: 
      - skip_ci
      - validate_github_secrets
      - validate_github_variables
    if: ${{ needs.skip_ci.outputs.should_run == 'true'}}
    uses: ./.github/workflows/prepare-metadata.yml
    with:
      skipTests: ${{ inputs.skipTests || vars.EXCLUDE_UNITY_TESTS || false }}
      deployTargets: ${{ inputs.deployTargets || vars.DEPLOY_TARGETS }}
      buildType: ${{ inputs.buildType }}
      version: ${{ inputs.version }}

  tagging:
    name: Create or Verify Tag
    needs: 
      - skip_ci
      - prepare_metadata
    if: ${{ needs.skip_ci.outputs.should_run == 'true'}}
    uses: ./.github/workflows/version-tagger.yml
    with:
      buildType: ${{ needs.prepare_metadata.outputs.buildType }}
      version: ${{ needs.prepare_metadata.outputs.version }}
    secrets: inherit
  
  trigger_ci:
    name: Trigger CI/CD Pipeline
    needs: 
      - skip_ci
      - tagging
      - prepare_metadata
    if: ${{ needs.skip_ci.outputs.should_run == 'true'}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Call CI/CD Pipeline from GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.CICD_PAT }}
        run: |
          gh workflow run ci-cd-pipeline.yml \
            --ref "${{ github.ref }}" \
            --field targetPlatforms="${{ needs.prepare_metadata.outputs.targetPlatforms }}" \
            --field validDeployTargets="$(printf '%s' '${{ needs.prepare_metadata.outputs.validDeployTargets }}')" \
            --field metadataConfig="$(jq -c -n \
              --arg projectName "${{ vars.PROJECT_NAME }}" \
              --arg triggeredBy "${{ needs.prepare_metadata.outputs.triggeredBy }}" \
              --arg skipTests "${{ needs.prepare_metadata.outputs.skipTests }}" \
              --arg testsOnly "${{ needs.prepare_metadata.outputs.testsOnly }}" \
              --arg buildType "${{ needs.prepare_metadata.outputs.buildType }}" \
              --arg version "${{ needs.prepare_metadata.outputs.version }}" \
              --arg retentionDays "${{ needs.prepare_metadata.outputs.retentionDays }}" \
              '{projectName: $projectName, triggeredBy: $triggeredBy, skipTests: $skipTests, testsOnly: $testsOnly, buildType: $buildType, version: $version, retentionDays: $retentionDays}')" \
            --field artifactConfig="$(jq -c -n \
              --arg requiresCombined "${{ needs.prepare_metadata.outputs.requiresCombined }}" \
              --arg skipPerPlatform "${{ needs.prepare_metadata.outputs.skipPerPlatform }}" \
              '{requiresCombined: $requiresCombined, skipPerPlatform: $skipPerPlatform}')"
            --field testDataConfig="$(jq -c -n \
              --arg unityVersion "${{ vars.UNITY_VERSION || 'auto' }}" \
              --arg useGitLfs "${{ vars.USE_GIT_LFS || 'false' }}" \
              --arg editModePath "${{ vars.UNITY_TESTS_EDITMODE_PATH || 'Assets/Tests/Editor' }}" \
              --arg playModePath "${{ vars.UNITY_TESTS_PLAYMODE_PATH || 'Assets/Tests/PlayMode' }}" \
              --arg timeoutMinutes "${{ vars.TIMEOUT_TESTS_IN_MINUTES || '15' }}" \
              --arg quietMode "${{ vars.UNITY_TESTS_QUIET_MODE || 'false' }}" \
              '{unityVersion: $unityVersion, useGitLfs: $useGitLfs, editModePath: $editModePath, playModePath: $playModePath, timeoutMinutes: $timeoutMinutes, quietMode: $quietMode}')"
