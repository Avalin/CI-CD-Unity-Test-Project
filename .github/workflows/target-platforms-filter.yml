name: üßÆ Target Platforms Filter

on:
  workflow_call:
    inputs:
      targetPlatforms:
        description: "JSON array of platforms to validate and split"
        required: true
        type: string
    outputs:
      macPlatforms:
        description: "List of platforms requiring macOS runners"
        value: ${{ jobs.filter_platforms.outputs.macPlatforms }}
      ubuntuPlatforms:
        description: "List of platforms compatible with Ubuntu runners"
        value: ${{ jobs.filter_platforms.outputs.ubuntuPlatforms }}

jobs:
  filter_platforms:
    name: üßÆ Filter Platforms
    runs-on: ubuntu-latest
    outputs:
      macPlatforms: ${{ steps.filter.outputs.macPlatforms }}
      ubuntuPlatforms: ${{ steps.filter.outputs.ubuntuPlatforms }}

    steps:
      - name: üìÅ Checkout repo
        uses: actions/checkout@v4

      - name: üîç Validate Platforms and Load OS Mapping
        id: validate
        run: |
          INPUT_JSON='${{ inputs.targetPlatforms }}'
          CONFIG_FILE=".github/config/target-platforms.json"
          FALLBACK_URL="https://raw.githubusercontent.com/avalin/unity-ci-templates/main/.github/config/target-platforms.json"

          echo "üîç Validating input platforms: $INPUT_JSON"

          # Check config exists or download fallback
          if [ -f "$CONFIG_FILE" ]; then
            echo "‚úÖ Using config: $CONFIG_FILE"
          else
            echo "‚ö†Ô∏è Config not found. Downloading fallback..."
            mkdir -p "$(dirname "$CONFIG_FILE")"
            curl -sSL "$FALLBACK_URL" -o "$CONFIG_FILE"
          fi

          # Validate input JSON
          echo "$INPUT_JSON" | jq empty || {
            echo "‚ùå Input is not valid JSON."
            exit 1
          }

          KNOWN_KEYS=$(jq -r 'keys[]' "$CONFIG_FILE")
          echo "üìö Known platforms: $KNOWN_KEYS"

          INPUTS=$(echo "$INPUT_JSON" | jq -r '.[]')
          VALID=()
          INVALID=()

          for PLATFORM in $INPUTS; do
            if echo "$KNOWN_KEYS" | grep -qx "$PLATFORM"; then
              VALID+=("$PLATFORM")
            else
              INVALID+=("$PLATFORM")
            fi
          done

          if [ "${#INVALID[@]}" -gt 0 ]; then
            echo "‚ö†Ô∏è Unrecognized platforms (ignored):"
            for p in "${INVALID[@]}"; do echo "  - $p"; done
          fi

          # Output valid platforms
          VALID_JSON=$(printf '%s\n' "${VALID[@]}" | jq -R . | jq -s .)
          echo "validPlatforms<<EOF" >> $GITHUB_OUTPUT
          echo "$VALID_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üß™ Split Platforms by OS
        id: filter
        run: |
          CONFIG_FILE=".github/config/target-platforms.json"
          PLATFORMS='${{ steps.validate.outputs.validPlatforms }}'

          echo "üì• Filtering platforms by OS: $PLATFORMS"

          MAC_PLATFORMS=$(echo "$PLATFORMS" | jq -c --argfile cfg "$CONFIG_FILE" '
            map(select($cfg[.] == "macos-latest"))')

          UBUNTU_PLATFORMS=$(echo "$PLATFORMS" | jq -c --argfile cfg "$CONFIG_FILE" '
            map(select($cfg[.] == "ubuntu-latest"))')

          echo "üíª Mac platforms: $MAC_PLATFORMS"
          echo "üêß Ubuntu platforms: $UBUNTU_PLATFORMS"

          echo "macPlatforms=$MAC_PLATFORMS" >> $GITHUB_OUTPUT
          echo "ubuntuPlatforms=$UBUNTU_PLATFORMS" >> $GITHUB_OUTPUT