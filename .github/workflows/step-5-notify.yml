name: 📣 Step 5 - Notify

on:
  workflow_call:
    inputs:
      releaseResult:
        required: true
        type: string
      deployResult:
        required: true
        type: string
      version:
        required: true
        type: string

jobs:
  notify:
    if: startsWith(inputs.version, 'v') && !contains(inputs.version, '-preview')
    runs-on: ubuntu-latest
    steps:
      - name: 🧠 Set Notification Variables
        id: vars
        run: |
          RELEASE="${{ inputs.releaseResult }}"
          DEPLOY="${{ inputs.deployResult }}"
          VERSION="${{ inputs.version }}"
          REPO="${{ github.repository }}"
          RELEASE_URL="https://github.com/${REPO}/releases/tag/${VERSION}"

          if [[ "$RELEASE" == "success" ]]; then
            if [[ "$DEPLOY" == "success" ]]; then
              TITLE="✅ Release & Deploy Succeeded - ${VERSION}"
              MESSAGE="Release \`${VERSION}\` completed successfully. [View Release](${RELEASE_URL})"
              STATUS="success"
            elif [[ "$DEPLOY" == "skipped" ]]; then
              TITLE="✅ Release Succeeded (No Deploy) - ${VERSION}"
              MESSAGE="Release \`${VERSION}\` completed successfully. No deployment targets set. [View Release](${RELEASE_URL})"
              STATUS="neutral"
            else
              TITLE="⚠️ Release Succeeded, Deploy Failed - ${VERSION}"
              MESSAGE="Release \`${VERSION}\` succeeded, but deployment failed. [View Release](${RELEASE_URL})"
              STATUS="failure"
            fi
          else
            TITLE="❌ Release Failed - ${VERSION}"
            MESSAGE="Release \`${VERSION}\` failed. Check logs for details."
            STATUS="failure"
          fi

          echo "title=$TITLE" >> "$GITHUB_OUTPUT"
          echo "message=$MESSAGE" >> "$GITHUB_OUTPUT"
          echo "status=$STATUS" >> "$GITHUB_OUTPUT"

      - name: 📢 Send Slack Notification (if configured)
        if: ${{ env.SLACK_WEBHOOK != '' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "*${{ steps.vars.outputs.title }}* - `${{ github.repository }}`",
              "attachments": [
                {
                  "text": "${{ steps.vars.outputs.message }}",
                  "color": "${{ steps.vars.outputs.status == 'success' && 'good' || steps.vars.outputs.status == 'failure' && 'danger' || '#cccccc' }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: 📢 Send Discord Notification (if configured)
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"username\":\"GitHub CI\",\"embeds\":[{\"title\":\"${{ steps.vars.outputs.title }}\",\"description\":\"${{ steps.vars.outputs.message }}\",\"color\":${{ steps.vars.outputs.status == 'success' && 3066993 || steps.vars.outputs.status == 'failure' && 15158332 || 9807270 }} }]}" \
               $DISCORD_WEBHOOK
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      - name: 📢 Notify Microsoft Teams (if configured)
        if: ${{ env.MSTEAMS_WEBHOOK != '' }}
        run: |
          case "${{ steps.vars.outputs.status }}" in
            success) COLOR="00FF00" ;;
            failure) COLOR="FF0000" ;;
            *) COLOR="999999" ;;
          esac

          curl -H "Content-Type: application/json" \
               -d "{
                     \"@type\": \"MessageCard\",
                     \"@context\": \"http://schema.org/extensions\",
                     \"summary\": \"CI/CD Notification\",
                     \"themeColor\": \"$COLOR\",
                     \"title\": \"${{ steps.vars.outputs.title }}\",
                     \"text\": \"${{ steps.vars.outputs.message }}\"
                   }" \
               $MSTEAMS_WEBHOOK
        env:
          MSTEAMS_WEBHOOK: ${{ secrets.MSTEAMS_WEBHOOK }}
