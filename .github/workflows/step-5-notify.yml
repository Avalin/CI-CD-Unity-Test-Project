name: üì£ Step 5 - Notify

on:
  workflow_call:
    inputs:
      releaseResult:
        required: true
        type: string
      deployResult:
        required: true
        type: string
      version:
        required: true
        type: string

jobs:
  notify:
    if: startsWith(inputs.version, 'v') && !contains(inputs.version, '-preview')
    runs-on: ubuntu-latest

    steps:
      - name: üß† Set Notification Variables
        id: vars
        run: |
          RELEASE="${{ inputs.releaseResult }}"
          DEPLOY="${{ inputs.deployResult }}"
          VERSION="${{ inputs.version }}"
          REPO="${{ github.repository }}"
          RUN_URL="https://github.com/${REPO}/actions/runs/${{ github.run_id }}"
          RELEASE_URL="https://github.com/${REPO}/releases/tag/${VERSION}"

          START_TIME="${{ github.event.workflow_run.created_at || github.event.head_commit.timestamp || '' }}"
          END_TIME=$(date -u +%s)
          DURATION_TEXT=""

          if [ -n "$START_TIME" ]; then
            START_EPOCH=$(date -d "$START_TIME" +%s || echo "")
            if [ -n "$START_EPOCH" ]; then
              SECONDS=$((END_TIME - START_EPOCH))
              MINS=$((SECONDS / 60))
              SECS=$((SECONDS % 60))
              DURATION_TEXT="‚è± **Duration**: ${MINS}m ${SECS}s"
            fi
          fi

          if [[ "$RELEASE" == "success" ]]; then
            if [[ "$DEPLOY" == "success" ]]; then
              TITLE="‚úÖ Release & Deploy Succeeded"
              MESSAGE=$'üéâ **`'"$VERSION"$'` released**\nüîó [Release Page]('"$RELEASE_URL"$')]'
              STATUS="success"
            elif [[ "$DEPLOY" == "skipped" ]]; then
              TITLE="‚úÖ Release Succeeded (No Deploy)"
              MESSAGE=$'üéâ **`'"$VERSION"$'` released** (No deploy targets)\nüîó [Release Page]('"$RELEASE_URL"$')]'
              STATUS="neutral"
            else
              TITLE="‚ö†Ô∏è Release Succeeded, Deploy Failed"
              MESSAGE=$'‚ö†Ô∏è **`'"$VERSION"$'` released** but deployment failed\nüîó [Release Page]('"$RELEASE_URL"$')]'
              STATUS="failure"
            fi
          else
            TITLE="‚ùå Release Failed"
            MESSAGE=$'‚ùå **`'"$VERSION"$'` release failed**. Check logs below.'
            STATUS="failure"
          fi

          MESSAGE="${MESSAGE}"$'\nüîç [View Workflow Logs]('"$RUN_URL"$')]"
          if [ -n "$DURATION_TEXT" ]; then
            MESSAGE="${MESSAGE}"$'\n'"$DURATION_TEXT"
          fi

          echo "title=$TITLE" >> "$GITHUB_OUTPUT"
          echo "message=$MESSAGE" >> "$GITHUB_OUTPUT"
          echo "status=$STATUS" >> "$GITHUB_OUTPUT"

      - name: üß™ Collect Failed Deploy Targets
        id: failed_targets
        if: always()
        run: |
          map_target() {
            case "$1" in
              "itch.io") echo "üïπÔ∏è itch.io" ;;
              "testflight") echo "üçè TestFlight" ;;
              "steam") echo "üéÆ Steam" ;;
              "firebase") echo "üî• Firebase" ;;
              "s3") echo "‚òÅÔ∏è AWS S3" ;;
              "gh-pages") echo "üåç GitHub Pages" ;;
              "discord") echo "üí¨ Discord" ;;
              "appcenter") echo "üì± App Center" ;;
              "custom-server") echo "üñ•Ô∏è Custom Server" ;;
              *) echo "‚ùì $1" ;;
            esac
          }

          SUMMARY_PATH="${{ github.workspace }}/../_temp/_github_step_summary.md"
          FAILS=""
          if [[ -f "$SUMMARY_PATH" ]]; then
            while IFS= read -r line; do
              if [[ "$line" == "### üì¶ Deployment:"* ]]; then
                RAW_TARGET="${line#*Deployment: }"
              fi
              if [[ "$line" == *"‚ùå Failed"* ]]; then
                EMOJI_TARGET=$(map_target "$RAW_TARGET")
                FAILS="${FAILS}- ${EMOJI_TARGET}"$'\n'
              fi
            done < "$SUMMARY_PATH"
          fi

          echo "failList=${FAILS}" >> "$GITHUB_OUTPUT"

      - name: üß© Append Failed Targets to Message
        id: final_message
        run: |
          MSG="${{ steps.vars.outputs.message }}"
          FAIL_LIST="${{ steps.failed_targets.outputs.failList }}"
          if [ -n "$FAIL_LIST" ]; then
            MSG="${MSG}"$'\n\n'"${FAIL_LIST}"
          fi
          {
            echo "final<<EOF"
            echo "$MSG"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: üì¢ Send Slack Notification (if configured)
        if: ${{ env.SLACK_WEBHOOK != '' }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "*${{ steps.vars.outputs.title }}* - `${{ github.repository }}`",
              "attachments": [
                {
                  "text": "${{ steps.final_message.outputs.final }}",
                  "color": "${{ steps.vars.outputs.status == 'success' && 'good' || steps.vars.outputs.status == 'failure' && 'danger' || '#cccccc' }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: üì¢ Send Discord Notification (if configured)
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"username\":\"GitHub CI\",\"embeds\":[{\"title\":\"${{ steps.vars.outputs.title }}\",\"description\":\"${{ steps.final_message.outputs.final }}\",\"color\":${{ steps.vars.outputs.status == 'success' && 3066993 || steps.vars.outputs.status == 'failure' && 15158332 || 9807270 }} }]}" \
               $DISCORD_WEBHOOK
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      - name: üì¢ Notify Microsoft Teams (if configured)
        if: ${{ env.MSTEAMS_WEBHOOK != '' }}
        run: |
          case "${{ steps.vars.outputs.status }}" in
            success) COLOR="00FF00" ;;
            failure) COLOR="FF0000" ;;
            *) COLOR="999999" ;;
          esac

          curl -H "Content-Type: application/json" \
               -d "{
                     \"@type\": \"MessageCard\",
                     \"@context\": \"http://schema.org/extensions\",
                     \"summary\": \"CI/CD Notification\",
                     \"themeColor\": \"$COLOR\",
                     \"title\": \"${{ steps.vars.outputs.title }}\",
                     \"text\": \"${{ steps.final_message.outputs.final }}\"
                   }" \
               $MSTEAMS_WEBHOOK
        env:
          MSTEAMS_WEBHOOK: ${{ secrets.MSTEAMS_WEBHOOK }}
