name: 📣 Step 5 - Notify

on:
  workflow_call:
    inputs:
      releaseResult:
        required: true
        type: string
      releaseErrorMessage:
        required: false
        type: string
      deployResult:
        required: true
        type: string
      version:
        required: true
        type: string

jobs:
  generate-notification:
    uses: avalin/unity-ci-templates/.github/workflows/generate-notification.yml@main
    with:
      releaseResult: ${{ inputs.releaseResult }}
      releaseErrorMessage: ${{ inputs.releaseErrorMessage }}
      deployResult: ${{ inputs.deployResult }}
      version: ${{ inputs.version }}

  notify:
    if: startsWith(inputs.version, 'v') && !contains(inputs.version, '-preview')
    needs: generate-notification
    runs-on: ubuntu-latest
    env:
      SLACK_STATUS: "⚠️ Webhook not configured"
      DISCORD_STATUS: "⚠️ Webhook not configured"
      TEAMS_STATUS: "⚠️ Webhook not configured"
    steps:
      # ───── Slack ─────
      - name: 📢 Send Slack Notification (if configured)
        if: ${{ env.SLACK_WEBHOOK != '' }}
        id: slack
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "*${{ needs.generate-notification.outputs.title }}* - `${{ github.repository }}`\n${{ needs.generate-notification.outputs.slackMessage }}",
              "attachments": [
                {
                  "color": "${{ needs.generate-notification.outputs.status == 'success' && 'good' || needs.generate-notification.outputs.status == 'failure' && 'danger' || '#cccccc' }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: 🧾 Mark Slack Status
        if: ${{ env.SLACK_WEBHOOK != '' }}
        run: |
          if [ "${{ steps.slack.outcome }}" == "success" ]; then
            echo "SLACK_STATUS=✅ Notification sent" >> $GITHUB_ENV
          else
            echo "SLACK_STATUS=❌ Failed to send" >> $GITHUB_ENV
          fi
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      # ───── Discord ─────
      - name: 📢 Send Discord Notification (if configured)
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        id: discord
        continue-on-error: true
        run: |
          case "${{ needs.generate-notification.outputs.status }}" in
            success) COLOR=3066993 ;;
            failure) COLOR=15158332 ;;
            *) COLOR=9807270 ;;
          esac

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Content-Type: application/json" \
            -X POST \
            -d '{
                  "username": "GitHub CI",
                  "embeds": [ {
                    "title": "'"${{ needs.generate-notification.outputs.title }}"'",
                    "description": "'"${{ needs.generate-notification.outputs.discordMessage }}"'",
                    "color": '"$COLOR"'
                  } ]
                }' \
            $DISCORD_WEBHOOK)

          # After sending the request
          if [ "$RESPONSE" -ge 200 ] && [ "$RESPONSE" -lt 300 ]; then
            echo "DISCORD_STATUS=✅ Notification sent" >> $GITHUB_ENV
          else
            echo "DISCORD_STATUS=❌ Failed to send (HTTP $RESPONSE)" >> $GITHUB_ENV
          fi
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      - name: 🧾 Mark Discord Status
        if: ${{ env.DISCORD_WEBHOOK != '' }}
        run: |
          if [ "${{ steps.discord.outcome }}" != "success" ] && [[ "$DISCORD_STATUS" == "⚠️ Webhook not configured" ]]; then
            echo "DISCORD_STATUS=❌ Failed to send" >> $GITHUB_ENV
          fi
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      # ───── Microsoft Teams ─────
      - name: 📢 Notify Microsoft Teams (if configured)
        if: ${{ env.MSTEAMS_WEBHOOK != '' }}
        id: teams
        continue-on-error: true
        run: |
          case "${{ needs.generate-notification.outputs.status }}" in
            success) COLOR="00FF00" ;;
            failure) COLOR="FF0000" ;;
            *) COLOR="999999" ;;
          esac

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Content-Type: application/json" \
            -d "{
                  \"@type\": \"MessageCard\",
                  \"@context\": \"http://schema.org/extensions\",
                  \"summary\": \"CI/CD Notification\",
                  \"themeColor\": \"$COLOR\",
                  \"title\": \"${{ needs.generate-notification.outputs.title }}\",
                  \"text\": \"${{ needs.generate-notification.outputs.teamsMessage }}\"
                }" \
            $MSTEAMS_WEBHOOK)

          if [ "$RESPONSE" -ge 200 ] && [ "$RESPONSE" -lt 300 ]; then
            echo "TEAMS_STATUS=✅ Notification sent" >> $GITHUB_ENV
          else
            echo "TEAMS_STATUS=❌ Failed to send (HTTP $RESPONSE)" >> $GITHUB_ENV
          fi
        env:
          MSTEAMS_WEBHOOK: ${{ secrets.MSTEAMS_WEBHOOK }}

      - name: 🧾 Mark Teams Status
        if: ${{ env.MSTEAMS_WEBHOOK != '' }}
        run: |
          if [ "${{ steps.teams.outcome }}" != "success" ] && [[ "$TEAMS_STATUS" == "⚠️ Webhook not configured" ]]; then
            echo "TEAMS_STATUS=❌ Failed to send" >> $GITHUB_ENV
          fi
        env:
          MSTEAMS_WEBHOOK: ${{ secrets.MSTEAMS_WEBHOOK }}

      # ───── Summary ─────
      - name: 📄 Notification Summary
        if: always()
        run: |
          echo "### 📣 Notification Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Channel | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Slack   | ${SLACK_STATUS%% *} | ${SLACK_STATUS#* } |" >> $GITHUB_STEP_SUMMARY
          echo "| Discord | ${DISCORD_STATUS%% *} | ${DISCORD_STATUS#* } |" >> $GITHUB_STEP_SUMMARY
          echo "| Teams   | ${TEAMS_STATUS%% *} | ${TEAMS_STATUS#* } |" >> $GITHUB_STEP_SUMMARY