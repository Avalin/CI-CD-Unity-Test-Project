name: ‚ôªÔ∏è Generate Notification

on:
  workflow_call:
    inputs:
      releaseResult:
        required: true
        type: string
      releaseErrorMessage:
        required: false
        type: string
      deployResult:
        required: true
        type: string
      version:
        required: true
        type: string
    outputs:
      title:
        description: 'Main notification title'
        value: ${{ jobs.generate.outputs.title }}
      message:
        description: 'Notification body message'
        value: ${{ jobs.generate.outputs.message }}
      slackMessage:
        description: 'Slack-formatted message'
        value: ${{ jobs.generate.outputs.slackMessage }}
      discordMessage:
        description: 'Discord-formatted message'
        value: ${{ jobs.generate.outputs.discordMessage }}
      teamsMessage:
        description: 'Teams-formatted message'
        value: ${{ jobs.generate.outputs.teamsMessage }}
      status:
        description: 'Status for use in color codes (success, failure, etc)'
        value: ${{ jobs.generate.outputs.status }}

jobs:
  generate:
    runs-on: ubuntu-latest
    outputs:
      title: ${{ steps.vars.outputs.title }}
      message: ${{ steps.vars.outputs.message }}
      slackMessage: ${{ steps.vars.outputs.slackMessage }}
      discordMessage: ${{ steps.vars.outputs.discordMessage }}
      teamsMessage: ${{ steps.vars.outputs.teamsMessage }}
      status: ${{ steps.vars.outputs.status }}
    steps:
      - name: üß† Set Notification Variables
        id: vars
        run: |
          RELEASE="${{ inputs.releaseResult }}"
          DEPLOY="${{ inputs.deployResult }}"
          VERSION="${{ inputs.version }}"
          ERROR="${{ inputs.releaseErrorMessage }}"
          REPO="${{ github.repository }}"
          RELEASE_URL="https://github.com/${REPO}/releases/tag/${VERSION}"
          RUN_URL="https://github.com/${REPO}/actions/runs/${GITHUB_RUN_ID}"

          BRANCH="${GITHUB_REF_NAME}"
          COMMIT="${GITHUB_SHA}"
          PR_NUMBER="${{ github.event.pull_request.number || '' }}"

          # Common link labels
          VIEW_RELEASE_TEXT="View Release"
          VIEW_PIPELINE_TEXT="View Pipeline"

          # Reusable link formats
          LINK_RELEASE="[${VIEW_RELEASE_TEXT}](${RELEASE_URL})"
          LINK_PIPELINE="[${VIEW_PIPELINE_TEXT}](${RUN_URL})"
          SLACK_LINK_RELEASE="<${RELEASE_URL}|${VIEW_RELEASE_TEXT}>"
          SLACK_LINK_PIPELINE="<${RUN_URL}|${VIEW_PIPELINE_TEXT}>"

          # Build optional traceability context
          TRACE=""
          [[ -n "$PR_NUMBER" ]] && TRACE+="PR #$(printf '%04d' "$PR_NUMBER")"
          [[ -n "$BRANCH" ]] && TRACE+="${TRACE:+ | }Branch: \`$BRANCH\`"
          [[ -n "$COMMIT" ]] && TRACE+="${TRACE:+ | }Commit: \`$(echo "$COMMIT" | cut -c1-7)\`"

          if [[ "$RELEASE" == "success" ]]; then
            if [[ "$DEPLOY" == "success" ]]; then
              TITLE="‚úÖ Release & Deploy Succeeded - ${VERSION}"
              MESSAGE="Release \`${VERSION}\` completed successfully. ${LINK_RELEASE}"
              STATUS="success"
            elif [[ "$DEPLOY" == "skipped" ]]; then
              TITLE="‚úÖ Release Succeeded (No Deploy) - ${VERSION}"
              MESSAGE="Release \`${VERSION}\` completed successfully. No deployment targets set. ${LINK_RELEASE}"
              STATUS="neutral"
            else
              TITLE="‚ö†Ô∏è Release Succeeded, Deploy Failed - ${VERSION}"
              MESSAGE="Release \`${VERSION}\` succeeded, but deployment failed. ${LINK_RELEASE}"
              STATUS="failure"
            fi
          else
            TITLE="‚ùå Release Failed - ${VERSION}"
            if [[ -n "$ERROR" ]]; then
              MESSAGE="Release \`${VERSION}\` failed: \`${ERROR}\`. ${LINK_PIPELINE}"
            else
              MESSAGE="Release \`${VERSION}\` failed. ${LINK_PIPELINE} for details."
            fi
            STATUS="failure"
          fi

          # Append context if available
          if [[ -n "$TRACE" ]]; then
            MESSAGE="$MESSAGE\n$TRACE"
          fi

          # Slack-specific formatting uses preformatted links
          SLACK_MSG="${MESSAGE}"
          SLACK_MSG="${SLACK_MSG//$LINK_RELEASE/$SLACK_LINK_RELEASE}"
          SLACK_MSG="${SLACK_MSG//$LINK_PIPELINE/$SLACK_LINK_PIPELINE}"

          echo "title=$TITLE" >> "$GITHUB_OUTPUT"
          echo "message=$MESSAGE" >> "$GITHUB_OUTPUT"
          echo "status=$STATUS" >> "$GITHUB_OUTPUT"
          echo "slackMessage=$SLACK_MSG" >> "$GITHUB_OUTPUT"
          echo "discordMessage=$MESSAGE" >> "$GITHUB_OUTPUT"
          echo "teamsMessage=$MESSAGE" >> "$GITHUB_OUTPUT"
