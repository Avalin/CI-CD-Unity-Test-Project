name: 🔔 Generate Notification

on:
  workflow_call:
    inputs:
      releaseResult:
        required: true
        type: string
      releaseErrorMessage:
        required: false
        type: string
      deployResult:
        required: true
        type: string
      version:
        required: true
        type: string
    outputs:
      title:
        description: 'Main notification title'
        value: ${{ jobs.generate.outputs.title }}
      message:
        description: 'Notification body message'
        value: ${{ jobs.generate.outputs.message }}
      slackMessage:
        description: 'Slack-formatted message'
        value: ${{ jobs.generate.outputs.slackMessage }}
      discordMessage:
        description: 'Discord-formatted message'
        value: ${{ jobs.generate.outputs.discordMessage }}
      teamsMessage:
        description: 'Teams-formatted message'
        value: ${{ jobs.generate.outputs.teamsMessage }}
      status:
        description: 'Status for use in color codes (success, failure, etc)'
        value: ${{ jobs.generate.outputs.status }}

jobs:
  generate:
    runs-on: ubuntu-latest
    outputs:
      title: ${{ steps.set-outputs.outputs.title }}
      message: ${{ steps.set-outputs.outputs.message }}
      slackMessage: ${{ steps.set-outputs.outputs.slackMessage }}
      discordMessage: ${{ steps.set-outputs.outputs.discordMessage }}
      teamsMessage: ${{ steps.set-outputs.outputs.teamsMessage }}
      status: ${{ steps.set-outputs.outputs.status }}
    steps:
      - name: 🧱 Prepare Variables
        id: prep
        run: |
          echo "RELEASE=${{ inputs.releaseResult }}" >> $GITHUB_ENV
          echo "DEPLOY=${{ inputs.deployResult }}" >> $GITHUB_ENV
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          echo "ERROR=${{ inputs.releaseErrorMessage }}" >> $GITHUB_ENV
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "RELEASE_URL=https://github.com/${{ github.repository }}/releases/tag/${{ inputs.version }}" >> $GITHUB_ENV
          echo "RUN_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV
          if [[ "${GITHUB_REF_TYPE}" != "tag" ]]; then
            echo "BRANCH=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          else
            echo "BRANCH=" >> $GITHUB_ENV
          fi
          echo "COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.pull_request.number || '' }}" >> $GITHUB_ENV

      - name: 🧠 Determine Status and Message
        id: determine
        run: |
          TRACE=""
          [[ -n "$PR_NUMBER" ]] && TRACE+="PR #$(printf '%04d' "$PR_NUMBER")"
          [[ -n "$BRANCH" ]] && TRACE+="${TRACE:+ | }Branch: \`$BRANCH\`"
          [[ -n "$COMMIT" ]] && TRACE+="${TRACE:+ | }Commit: \`$(echo "$COMMIT" | cut -c1-7)\`"

          if [[ "$RELEASE" == "success" ]]; then
            if [[ "$DEPLOY" == "success" ]]; then
              TITLE="✅ Release & Deploy Succeeded - $VERSION"
              MESSAGE="Release \`$VERSION\` completed successfully. [View Release]($RELEASE_URL)"
              STATUS="success"
            elif [[ "$DEPLOY" == "skipped" ]]; then
              TITLE="✅ Release Succeeded (No Deploy) - $VERSION"
              MESSAGE="Release \`$VERSION\` completed successfully. No deployment targets set. [View Release]($RELEASE_URL)"
              STATUS="neutral"
            else
              TITLE="⚠️ Release Succeeded, Deploy Failed - $VERSION"
              MESSAGE="Release \`$VERSION\` succeeded, but deployment failed. [View Release]($RELEASE_URL)"
              STATUS="failure"
            fi
          else
            TITLE="❌ Release Failed - $VERSION"
            if [[ -n "$ERROR" ]]; then
              MESSAGE="Release \`$VERSION\` failed: \`$ERROR\`. [View Pipeline]($RUN_URL)"
            else
              MESSAGE="Release \`$VERSION\` failed. [View Pipeline]($RUN_URL) for details."
            fi
            STATUS="failure"
          fi

          [[ -n "$TRACE" ]] && MESSAGE="$MESSAGE\n$TRACE"

          echo "TITLE=$TITLE" >> $GITHUB_ENV
          echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV
          echo "STATUS=$STATUS" >> $GITHUB_ENV

      - name: 💬 Format Messages
        id: set-outputs
        run: |
          SLACK_MSG=$(echo "$MESSAGE" | sed "s#\\[View Pipeline\\]($RUN_URL)#<${RUN_URL}|View Pipeline>#g")
          SLACK_MSG=$(echo "$SLACK_MSG" | sed "s#\\[View Release\\]($RELEASE_URL)#<${RELEASE_URL}|View Release>#g")

          echo "title=$TITLE" >> "$GITHUB_OUTPUT"
          echo "message=$MESSAGE" >> "$GITHUB_OUTPUT"
          echo "status=$STATUS" >> "$GITHUB_OUTPUT"
          echo "slackMessage=$SLACK_MSG" >> "$GITHUB_OUTPUT"
          echo "discordMessage=$MESSAGE" >> "$GITHUB_OUTPUT"
          echo "teamsMessage=$MESSAGE" >> "$GITHUB_OUTPUT"